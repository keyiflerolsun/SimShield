// --- CONFIG: SimShield API endpoints ---
const API_BASE = window.location.origin; // Otomatik olarak mevcut sunucu
const WS_BASE = (location.protocol === 'https:' ? 'wss' : 'ws') + '://' + window.location.host + '/api/v1/ws/alerts';
// -------------------------------

class SimShieldDashboard {
  constructor() {
    this.sims = [];
    this.selectedSim = null;
    this.ws = null;
    this.chartData = null;
    
    this.initElements();
    this.initEventListeners();
    this.connectWebSocket();
    this.loadFleetData();
    
    // Auto refresh every 30 seconds
    setInterval(() => this.loadFleetData(), 30000);
  }
  
  initElements() {
    this.elements = {
      fleetList: document.getElementById('fleet-list'),
      refreshBtn: document.getElementById('refresh'),
      selectedName: document.getElementById('selected-sim-name'),
      selectedMeta: document.getElementById('selected-sim-meta'),
      simDetails: document.getElementById('sim-details'),
      usageChart: document.getElementById('usage-chart'),
      analyzeBtn: document.getElementById('analyze-btn'),
      actionsLog: document.getElementById('actions-log'),
      alertsLog: document.getElementById('alerts-log'),
      wsStatus: document.getElementById('ws-status'),
      wsDot: document.getElementById('ws-dot'),
      apiStatus: document.getElementById('api-status'),
      searchInput: document.getElementById('search-input'),
      riskFilter: document.getElementById('risk-filter'),
      statusFilter: document.getElementById('status-filter'),
      cityFilter: document.getElementById('city-filter'),
      freezeBtn: document.getElementById('freeze-btn'),
      throttleBtn: document.getElementById('throttle-btn'),
      notifyBtn: document.getElementById('notify-btn'),
      bestOptionsBtn: document.getElementById('best-options-btn'),
      whatifBtn: document.getElementById('whatif-btn'),
      anomalyAnalysis: document.getElementById('anomaly-analysis')
    };
  }
  
  initEventListeners() {
    this.elements.refreshBtn.addEventListener('click', () => this.loadFleetData());
    this.elements.analyzeBtn.addEventListener('click', () => this.analyzeCurrentSim());
    this.elements.freezeBtn.addEventListener('click', () => this.executeAction('freeze_24h'));
    this.elements.throttleBtn.addEventListener('click', () => this.executeAction('throttle'));
    this.elements.notifyBtn.addEventListener('click', () => this.executeAction('notify'));
    this.elements.bestOptionsBtn.addEventListener('click', () => this.loadBestOptions());
    this.elements.whatifBtn.addEventListener('click', () => this.showWhatIfModal());
    
    // Filtreler
    this.elements.searchInput.addEventListener('input', () => this.filterAndRender());
    this.elements.riskFilter.addEventListener('change', () => this.filterAndRender());
    this.elements.statusFilter.addEventListener('change', () => this.filterAndRender());
    this.elements.cityFilter.addEventListener('change', () => this.filterAndRender());
    
    // Tƒ±klanabilir istatistik kartlarƒ±
    document.querySelectorAll('.clickable-stat').forEach(stat => {
      stat.addEventListener('click', (e) => {
        const filterType = e.currentTarget.getAttribute('data-filter');
        this.applyStatFilter(filterType, e.currentTarget);
      });
    });
  }
  
  async apiCall(path, options = {}) {
    try {
      const response = await fetch(API_BASE + path, {
        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
        ...options
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error(`API call failed for ${path}:`, error);
      throw error;
    }
  }
  
  async loadFleetData() {
    try {
      this.elements.fleetList.innerHTML = '<div class="muted">üì° Filo verileri y√ºkleniyor...</div>';
      this.elements.apiStatus.textContent = 'y√ºkleniyor...';
      
      const data = await this.apiCall('/api/v1/fleet');
      this.sims = Array.isArray(data) ? data : (data.sims || []);
      
      this.updateStatistics();
      this.populateCityFilter();
      this.filterAndRender();
      
      this.elements.apiStatus.textContent = 'baƒülƒ± ‚úì';
      this.elements.apiStatus.style.color = 'var(--accent)';
      
    } catch (error) {
      console.error('Fleet data load error:', error);
      this.elements.fleetList.innerHTML = `<div class="muted">‚ùå Filo y√ºklenemedi: ${error.message}</div>`;
      this.elements.apiStatus.textContent = 'hata ‚úó';
      this.elements.apiStatus.style.color = 'var(--danger)';
    }
  }
  
  updateStatistics() {
    const total = this.sims.length;
    const active = this.sims.filter(s => s.status === 'active').length;
    const highRisk = this.sims.filter(s => (s.risk_level === 'red' || s.risk_score >= 70)).length;
    const anomalies = this.sims.reduce((sum, s) => sum + (s.anomaly_count || 0), 0);
    
    document.getElementById('total-sims').textContent = total;
    document.getElementById('active-sims').textContent = active;
    document.getElementById('high-risk-sims').textContent = highRisk;
    document.getElementById('anomaly-count').textContent = anomalies;
  }
  
  populateCityFilter() {
    const cities = [...new Set(this.sims.map(s => s.city).filter(Boolean))].sort();
    const cityFilter = this.elements.cityFilter;
    
    // Mevcut se√ßimi koru
    const currentValue = cityFilter.value;
    cityFilter.innerHTML = '<option value="">T√ºm ≈ûehir</option>';
    cities.forEach(city => {
      const option = document.createElement('option');
      option.value = city;
      option.textContent = city;
      cityFilter.appendChild(option);
    });
    cityFilter.value = currentValue;
  }
  
  filterAndRender() {
    const searchTerm = this.elements.searchInput.value.toLowerCase();
    const riskFilter = this.elements.riskFilter.value;
    const statusFilter = this.elements.statusFilter.value;
    const cityFilter = this.elements.cityFilter.value;
    
    const filtered = this.sims.filter(sim => {
      const matchesSearch = !searchTerm || 
        sim.sim_id.toLowerCase().includes(searchTerm) ||
        (sim.device_type || '').toLowerCase().includes(searchTerm);
      
      const matchesRisk = !riskFilter || sim.risk_level === riskFilter || 
        (riskFilter === 'red' && (sim.risk_score || 0) >= 70) ||
        (riskFilter === 'orange' && (sim.risk_score || 0) >= 40 && (sim.risk_score || 0) < 70) ||
        (riskFilter === 'green' && (sim.risk_score || 0) < 40);
      
      const matchesStatus = !statusFilter || sim.status === statusFilter;
      const matchesCity = !cityFilter || sim.city === cityFilter;
      
      return matchesSearch && matchesRisk && matchesStatus && matchesCity;
    });
    
    this.renderFleet(filtered);
  }
  
  applyStatFilter(filterType, clickedElement) {
    // √ñnceki aktif istatistik kartƒ±nƒ± temizle
    document.querySelectorAll('.clickable-stat').forEach(stat => {
      stat.classList.remove('active');
    });
    
    // Tƒ±klanan kartƒ± aktif yap
    clickedElement.classList.add('active');
    
    // Filtreleri temizle
    this.elements.searchInput.value = '';
    this.elements.riskFilter.value = '';
    this.elements.statusFilter.value = '';
    this.elements.cityFilter.value = '';
    
    let filtered = [...this.sims];
    let logMessage = '';
    
    switch (filterType) {
      case 'all':
        // Hi√ßbir filtre uygulamaya gerek yok
        logMessage = 'üìä T√ºm SIM\'ler g√∂steriliyor';
        break;
        
      case 'active':
        filtered = this.sims.filter(sim => sim.status === 'active');
        logMessage = `üü¢ ${filtered.length} aktif SIM g√∂steriliyor`;
        break;
        
      case 'high-risk':
        filtered = this.sims.filter(sim => (sim.risk_score || 0) >= 70);
        logMessage = `üî¥ ${filtered.length} y√ºksek riskli SIM g√∂steriliyor`;
        break;
        
      case 'anomaly':
        filtered = this.sims.filter(sim => (sim.anomaly_count || 0) > 0);
        logMessage = `‚ö†Ô∏è ${filtered.length} anomalili SIM g√∂steriliyor`;
        break;
    }
    
    this.renderFleet(filtered);
    this.appendLog(logMessage);
    
    // 3 saniye sonra aktif durumu kaldƒ±r
    setTimeout(() => {
      clickedElement.classList.remove('active');
    }, 3000);
  }
  
  renderFleet(simsToRender = this.sims) {
    if (!simsToRender || simsToRender.length === 0) {
      this.elements.fleetList.innerHTML = '<div class="muted">üì≠ Kriterlere uygun SIM bulunamadƒ±.</div>';
      return;
    }
    
    this.elements.fleetList.innerHTML = '';
    simsToRender.forEach(sim => {
      const element = this.createSimElement(sim);
      this.elements.fleetList.appendChild(element);
    });
  }
  
  createSimElement(sim) {
    const el = document.createElement('div');
    el.className = 'sim-item';
    if (this.selectedSim && this.selectedSim.sim_id === sim.sim_id) {
      el.classList.add('selected');
    }
    
    const riskScore = sim.risk_score || 0;
    const riskLevel = sim.risk_level || this.calculateRiskLevel(riskScore);
    const hasAnomalies = (sim.anomaly_count || 0) > 0;
    
    el.innerHTML = `
      <div class="sim-info">
        <div class="sim-id">
          ${hasAnomalies ? '<span class="anomaly-indicator"></span>' : ''}
          ${this.escapeHtml(sim.sim_id)}
        </div>
        <div class="sim-meta">
          <span>${this.getDeviceIcon(sim.device_type)} ${this.escapeHtml(sim.device_type || 'Bilinmiyor')}</span>
          <span>üìç ${this.escapeHtml(sim.city || '‚Äî')}</span>
          <span>üìä ${this.escapeHtml(sim.plan_name || sim.plan || '‚Äî')}</span>
        </div>
      </div>
      <div style="display:flex;align-items:center;gap:8px">
        <span class="badge ${riskLevel}">${riskScore}</span>
      </div>
    `;
    
    el.addEventListener('click', () => this.selectSim(sim));
    return el;
  }
  
  calculateRiskLevel(score) {
    if (score >= 70) return 'red';
    if (score >= 40) return 'orange';
    return 'green';
  }
  
  getDeviceIcon(deviceType) {
    const icons = {
      'POS': 'üí≥',
      'SmartMeter': '‚ö°',
      'Tracker': 'üìç',
      'Camera': 'üìπ',
      'Sensor': 'üå°Ô∏è'
    };
    return icons[deviceType] || 'üîß';
  }
  
  async selectSim(sim) {
    this.selectedSim = sim;
    
    // UI g√ºncellemelerini yap
    this.elements.selectedName.textContent = sim.sim_id;
    this.elements.selectedMeta.textContent = `${sim.device_type || '‚Äî'} ‚Ä¢ Plan: ${sim.plan_name || sim.plan || '‚Äî'} ‚Ä¢ Durum: ${this.getStatusText(sim.status)}`;
    
    // SIM detaylarƒ±nƒ± g√∂ster
    this.renderSimDetails(sim);
    
    // Butonlarƒ± aktifle≈ütir
    this.elements.analyzeBtn.disabled = false;
    this.elements.freezeBtn.disabled = false;
    this.elements.throttleBtn.disabled = false;
    this.elements.notifyBtn.disabled = false;
    this.elements.bestOptionsBtn.disabled = false;
    this.elements.whatifBtn.disabled = false;
    
    // Se√ßili SIM'i g√∂rsel olarak g√∂ster
    this.filterAndRender();
    
    // Verileri y√ºkle
    await this.loadSimData(sim.sim_id);
  }

  selectSimById(simId) {
    const sim = this.sims ? this.sims.find(s => s.sim_id === simId) : null;
    if (sim) {
      this.selectSim(sim);
      this.appendLog(`üéØ ${simId} SIM'i otomatik olarak se√ßildi`);
      
      // SIM'i g√∂r√ºn√ºr hale getir (scroll)
      setTimeout(() => {
        const simElement = document.querySelector(`.sim-item.selected`);
        if (simElement) {
          simElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
    } else {
      this.appendLog(`‚ùå ${simId} SIM'i bulunamadƒ±`);
    }
  }

  renderSimDetails(sim) {
    // Tarihleri kullanƒ±m verilerinden hesapla
    this.elements.simDetails.innerHTML = `
      <div class="sim-details-grid">
        <div class="sim-detail-item">
          <div class="detail-label">üì± SIM ID</div>
          <div class="detail-value">${this.escapeHtml(sim.sim_id)}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üìä Plan</div>
          <div class="detail-value">${this.escapeHtml(sim.plan_name || sim.plan || 'Bilinmiyor')}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üè∑Ô∏è Durum</div>
          <div class="detail-value">
            <span class="status-badge ${sim.status}">${this.getStatusText(sim.status)}</span>
          </div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">${this.getDeviceIcon(sim.device_type)} Cihaz</div>
          <div class="detail-value">${this.escapeHtml(sim.device_type || 'Bilinmiyor')}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üìç Konum</div>
          <div class="detail-value">${this.escapeHtml(sim.city || 'Bilinmiyor')}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üìÖ Aktivasyon</div>
          <div class="detail-value"><span class="loading-text">üì° Y√ºkleniyor...</span></div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üïí Son Aktivite</div>
          <div class="detail-value"><span class="loading-text">üì° Y√ºkleniyor...</span></div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">‚ö° Risk Skoru</div>
          <div class="detail-value">
            <span class="badge ${sim.risk_level || this.calculateRiskLevel(sim.risk_score || 0)}">${sim.risk_score || 0}</span>
          </div>
        </div>
      </div>
    `;
    
    // Tarihleri async olarak y√ºkle
    this.loadSimDates(sim.sim_id);
  }
  
  async loadSimData(simId) {
    try {
      // Kullanƒ±m verileri y√ºkle
      await this.loadUsageData(simId);
      
      // Anomali analizi y√ºkle
      await this.loadAnomalyData(simId);
      
    } catch (error) {
      console.error('SIM data load error:', error);
      this.appendLog(`‚ùå ${simId} verileri y√ºklenirken hata: ${error.message}`);
    }
  }
  
  async loadSimDates(simId) {
    try {
      // Kullanƒ±m verilerinden tarih bilgilerini al
      const data = await this.apiCall(`/api/v1/usage/${encodeURIComponent(simId)}?days=90`); // 1 yƒ±llƒ±k veri
      
      if (data && (Array.isArray(data) ? data.length > 0 : data.usage && data.usage.length > 0)) {
        const usage = Array.isArray(data) ? data : data.usage || [];
        
        if (usage.length > 0) {
          // En eski ve en yeni tarihleri bul
          const sortedUsage = usage.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
          const firstDate = new Date(sortedUsage[0].timestamp);
          const lastDate = new Date(sortedUsage[sortedUsage.length - 1].timestamp);
          
          // Tarihleri g√ºncelle
          this.updateSimDetailDate('üìÖ Aktivasyon', firstDate.toLocaleDateString('tr-TR'));
          this.updateSimDetailDate('üïí Son Aktivite', lastDate.toLocaleDateString('tr-TR'));
        } else {
          this.updateSimDetailDate('üìÖ Aktivasyon', 'Veri yok');
          this.updateSimDetailDate('üïí Son Aktivite', 'Veri yok');
        }
      } else {
        this.updateSimDetailDate('üìÖ Aktivasyon', 'Veri yok');
        this.updateSimDetailDate('üïí Son Aktivite', 'Veri yok');
      }
      
    } catch (error) {
      console.error('SIM dates load error:', error);
      this.updateSimDetailDate('üìÖ Aktivasyon', 'Hata');
      this.updateSimDetailDate('üïí Son Aktivite', 'Hata');
    }
  }
  
  updateSimDetailDate(labelText, dateValue) {
    // Label'a g√∂re ilgili detail-value'yu bul ve g√ºncelle
    const detailItems = document.querySelectorAll('.sim-detail-item');
    detailItems.forEach(item => {
      const label = item.querySelector('.detail-label');
      if (label && label.textContent.includes(labelText.split(' ')[1])) { // ƒ∞kon olmadan kontrol et
        const valueElement = item.querySelector('.detail-value');
        if (valueElement) {
          valueElement.textContent = dateValue;
        }
      }
    });
  }
  
  async loadUsageData(simId) {
    try {
      this.elements.usageChart.innerHTML = '<div class="muted">üìä Kullanƒ±m verileri y√ºkleniyor...</div>';
      
      const data = await this.apiCall(`/api/v1/usage/${encodeURIComponent(simId)}?days=30`);
      this.chartData = data;
      this.renderUsageChart(data);
      
    } catch (error) {
      this.elements.usageChart.innerHTML = `<div class="muted">‚ùå Kullanƒ±m verileri alƒ±namadƒ±: ${error.message}</div>`;
    }
  }
  
  renderUsageChart(data) {
    if (!data || (!Array.isArray(data) && !data.usage)) {
      this.elements.usageChart.innerHTML = '<div class="muted">üìà Kullanƒ±m verisi bulunamadƒ±</div>';
      return;
    }
    
    const usage = Array.isArray(data) ? data : data.usage || [];
    if (usage.length === 0) {
      this.elements.usageChart.innerHTML = '<div class="muted">üìà 30 g√ºnl√ºk kullanƒ±m verisi bulunamadƒ±</div>';
      return;
    }
    
    // Son 30 g√ºnl√ºk veriyi al
    const last30 = usage.slice(-30);
    const maxUsage = Math.max(...last30.map(u => u.mb_used || 0), 1);
    const totalUsage = last30.reduce((sum, u) => sum + (u.mb_used || 0), 0);
    const avgUsage = totalUsage / last30.length;
    
    // Peak kullanƒ±m g√ºnlerini belirle
    const peakDays = last30.filter(u => (u.mb_used || 0) > avgUsage * 2);
    
    const barsHtml = last30.map((u, index) => {
      const height = Math.max(2, ((u.mb_used || 0) / maxUsage) * 100);
      const isHigh = height > 60;
      const isPeak = (u.mb_used || 0) > avgUsage * 2;
      const date = new Date(u.timestamp).toLocaleDateString('tr-TR', { 
        day: '2-digit', 
        month: '2-digit'
      });
      const tooltipText = `${date}: ${(u.mb_used || 0).toFixed(1)} MB`;
      
      return `<div class="usage-bar ${isHigh ? 'high' : ''} ${isPeak ? 'peak' : ''}" 
                   style="height:${height}%" 
                   data-tooltip="${tooltipText}"></div>`;
    }).join('');
    
    this.elements.usageChart.innerHTML = `
      <div style="width:100%;height:100%;display:flex;flex-direction:column">
        <div class="usage-stats">
          <div class="usage-stat">
            <div class="stat-value">${totalUsage.toFixed(1)} MB</div>
            <div class="stat-label">Toplam</div>
          </div>
          <div class="usage-stat">
            <div class="stat-value">${avgUsage.toFixed(1)} MB</div>
            <div class="stat-label">Ortalama</div>
          </div>
          <div class="usage-stat">
            <div class="stat-value">${Math.max(...last30.map(u => u.mb_used || 0)).toFixed(1)} MB</div>
            <div class="stat-label">Maksimum</div>
          </div>
        </div>
        <div class="usage-bars">${barsHtml}</div>
        <div class="usage-footer">
          <span>Son 30 G√ºn</span>
          ${peakDays.length > 0 ? `<span class="peak-indicator">‚ö° ${peakDays.length} a≈üƒ±rƒ± kullanƒ±m g√ºn√º</span>` : ''}
        </div>
      </div>
    `;
  }
  
  async loadAnomalyData(simId) {
    try {
      this.elements.anomalyAnalysis.innerHTML = '<div class="muted">üîç Anomali verileri y√ºkleniyor...</div>';
      
      const analysis = await this.apiCall(`/api/v1/analyze/${encodeURIComponent(simId)}/latest`);
      this.renderAnomalyAnalysis(analysis);
      
    } catch (error) {
      this.elements.anomalyAnalysis.innerHTML = `<div class="muted">‚ÑπÔ∏è Anomali verisi bulunamadƒ±</div>`;
    }
  }
  
  renderAnomalyAnalysis(analysis) {
    if (!analysis || !analysis.anomalies || analysis.anomalies.length === 0) {
      this.elements.anomalyAnalysis.innerHTML = '<div class="analysis-item success">‚úÖ Anomali tespit edilmedi</div>';
      return;
    }
    
    const riskLevel = analysis.risk_level || 'warning';
    const riskScore = analysis.risk_score || 0;
    
    // Risk seviyesi a√ßƒ±klamasƒ±
    const riskDescription = this.getRiskDescription(riskScore, riskLevel);
    
    const anomalyItems = analysis.anomalies.map(anomaly => {
      const type = this.getAnomalyType(anomaly.type);
      const severity = anomaly.severity || this.getSeverityFromScore(riskScore);
      const detectedAt = anomaly.detected_at ? new Date(anomaly.detected_at).toLocaleString('tr-TR') : 'Tarih belirsiz';
      
      return `
        <div class="analysis-item ${severity}">
          <div class="anomaly-header">
            <span class="anomaly-title">${type.icon} ${type.title}</span>
            <span class="anomaly-time">${detectedAt}</span>
          </div>
          <div class="anomaly-description">
            ${this.escapeHtml(anomaly.reason || anomaly.description || 'Detay bilgi yok')}
          </div>
          ${anomaly.impact ? `<div class="anomaly-impact">üí• Etki: ${this.escapeHtml(anomaly.impact)}</div>` : ''}
        </div>
      `;
    }).join('');
    
    this.elements.anomalyAnalysis.innerHTML = this.formatRiskSummary({
      anomalies: analysis.anomalies,
      risk_level: riskLevel,
      risk_score: riskScore,
      summary: analysis.summary
    });
  }

  getRiskDescription(score, level) {
    if (score >= 80) return 'üö® Kritik seviye - Acil m√ºdahale gerekli';
    if (score >= 60) return '‚ö†Ô∏è Y√ºksek risk - Yakƒ±n takip √∂neriliyor';
    if (score >= 40) return 'üî∂ Orta seviye - ƒ∞zleme devam etsin';
    if (score >= 20) return 'üü° D√º≈ü√ºk risk - Normal aktivite';
    return '‚úÖ G√ºvenli seviye - Sorun yok';
  }

  getSeverityFromScore(score) {
    if (score >= 70) return 'danger';
    if (score >= 40) return 'warning';
    return 'success';
  }
  
  getAnomalyType(type) {
    const types = {
      'sudden_spike': { icon: '‚¨ÜÔ∏è', title: 'Ani Artƒ±≈ü' },
      'sustained_drain': { icon: 'üîã', title: 'S√ºrekli Y√ºksek Kullanƒ±m' },
      'inactivity': { icon: 'üò¥', title: 'ƒ∞naktivite' },
      'unexpected_roaming': { icon: 'üåç', title: 'Beklenmeyen Roaming' },
      'data_anomaly': { icon: 'üìä', title: 'Veri Anomalisi' },
      'location_anomaly': { icon: 'üìç', title: 'Konum Anomalisi' }
    };
    return types[type] || { icon: '‚ö†Ô∏è', title: 'Bilinmeyen Anomali' };
  }
  
  async analyzeCurrentSim() {
    if (!this.selectedSim) return;
    
    const btn = this.elements.analyzeBtn;
    const originalText = btn.innerHTML;
    btn.innerHTML = 'üîÑ Analiz ediliyor...';
    btn.disabled = true;
    
    try {
      const result = await this.apiCall(`/api/v1/analyze/${encodeURIComponent(this.selectedSim.sim_id)}`, {
        method: 'POST'
      });
      
      this.appendLog(this.formatAnalysisLog(result));
      
      // Anomali analizi yenile
      await this.loadAnomalyData(this.selectedSim.sim_id);
      
      // Fleet data'yƒ± yenile (risk skoru g√ºncellenmi≈ü olabilir)
      await this.loadFleetData();
      
    } catch (error) {
      this.appendLog(`‚ùå Analiz hatasƒ±: ${error.message}`);
    } finally {
      btn.innerHTML = originalText;
      btn.disabled = false;
    }
  }
  
  async executeAction(action) {
    if (!this.selectedSim) return;
    
    const actionNames = {
      'freeze_24h': '‚ùÑÔ∏è 24 Saat Dondurma',
      'throttle': 'üêå Hƒ±z D√º≈ü√ºrme',
      'notify': 'üì¢ Uyarƒ± G√∂nderme'
    };
    
    try {
      this.appendLog(`‚è≥ ${actionNames[action]} i≈ülemi ba≈ülatƒ±ldƒ±...`);
      
      const result = await this.apiCall('/api/v1/actions', {
        method: 'POST',
        body: JSON.stringify({
          sim_ids: [this.selectedSim.sim_id],
          action: action,
          reason: `Manuel ${action} eylemi`
        })
      });
      
      this.appendLog(`‚úÖ ${actionNames[action]} i≈ülemi tamamlandƒ±: ${result.message || 'Ba≈üarƒ±lƒ±'}`);
      
    } catch (error) {
      this.appendLog(`‚ùå ${actionNames[action]} hatasƒ±: ${error.message}`);
    }
  }
  
  async loadBestOptions() {
    if (!this.selectedSim) return;
    
    try {
      this.appendLog(`üí° ${this.selectedSim.sim_id} i√ßin en iyi se√ßenekler ara≈ütƒ±rƒ±lƒ±yor...`);
      
      const options = await this.apiCall(`/api/v1/best-options/${encodeURIComponent(this.selectedSim.sim_id)}`);
      
      if (options && options.length > 0) {
        // En iyi 3 se√ßeneƒüi detaylƒ± g√∂ster
        this.showBestOptionsModal(options.slice(0, 3));
      } else {
        this.appendLog(`‚ÑπÔ∏è ≈ûu an i√ßin daha iyi bir se√ßenek bulunamadƒ±`);
      }
      
    } catch (error) {
      this.appendLog(`‚ùå Se√ßenek analizi hatasƒ±: ${error.message}`);
    }
  }

  showBestOptionsModal(options) {
    // Modal HTML'i olu≈ütur
    const modalHtml = `
      <div class="modal-overlay" id="options-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>üí° ${this.selectedSim.sim_id} i√ßin En ƒ∞yi Se√ßenekler</h3>
            <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">‚úï</button>
          </div>
          <div class="modal-body">
            ${options.map((option, index) => `
              <div class="option-card ${index === 0 ? 'best-option' : ''}">
                <div class="option-header">
                  <div class="option-title">
                    ${index === 0 ? 'üèÜ ' : ''}${option.description}
                    ${index === 0 ? '<span class="best-badge">EN ƒ∞Yƒ∞</span>' : ''}
                  </div>
                  <div class="option-saving ${option.saving > 0 ? 'positive' : 'negative'}">
                    ${option.saving > 0 ? 'üí∞ ‚Ç∫' + option.saving.toFixed(2) + ' tasarruf' : '‚ö†Ô∏è ‚Ç∫' + Math.abs(option.saving).toFixed(2) + ' artƒ±≈ü'}
                  </div>
                </div>
                <div class="option-details">
                  <div class="cost-comparison">
                    <div class="cost-item">
                      <span class="cost-label">Mevcut Toplam:</span>
                      <span class="cost-value current">‚Ç∫${option.current_total.toFixed(2)}</span>
                    </div>
                    <div class="cost-item">
                      <span class="cost-label">Yeni Toplam:</span>
                      <span class="cost-value new">‚Ç∫${option.candidate_total.toFixed(2)}</span>
                    </div>
                  </div>
                  <div class="cost-breakdown">
                    <div class="breakdown-title">Maliyet Detayƒ±:</div>
                    <div class="breakdown-item">
                      <span>Plan √úcreti:</span>
                      <span>‚Ç∫${option.breakdown.base_cost.toFixed(2)}</span>
                    </div>
                    <div class="breakdown-item">
                      <span>A≈üƒ±m √úcreti:</span>
                      <span>‚Ç∫${option.breakdown.overage_cost.toFixed(2)}</span>
                    </div>
                    <div class="breakdown-item">
                      <span>Ek Paket:</span>
                      <span>‚Ç∫${option.breakdown.addon_cost.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </div>
            `).join('')}
            <div class="modal-note">
              üí° Bu √∂neriler son 30 g√ºnl√ºk kullanƒ±m verilerine dayanmaktadƒ±r.
            </div>
          </div>
          <div class="modal-footer">
            <button onclick="this.closest('.modal-overlay').remove()">Kapat</button>
          </div>
        </div>
      </div>
    `;
    
    // Modal'ƒ± sayfaya ekle
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Log'a da kƒ±sa √∂zet ekle
    const topOption = options[0];
    this.appendLog(`üí∞ En iyi se√ßenek: ${topOption.description} (‚Ç∫${topOption.saving.toFixed(2)} tasarruf)`);
  }

  showWhatIfModal() {
    if (!this.selectedSim) return;
    
    const modalHtml = `
      <div class="modal-overlay" id="whatif-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>üîÆ ${this.selectedSim.sim_id} i√ßin Sim√ºlasyon</h3>
            <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">‚úï</button>
          </div>
          <div class="modal-body">
            <div class="whatif-scenarios">
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('increase_20')">
                <div class="scenario-title">üìà %20 Kullanƒ±m Artƒ±≈üƒ±</div>
                <div class="scenario-desc">Gelecek ay kullanƒ±m %20 artarsa ne olur?</div>
              </div>
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('decrease_30')">
                <div class="scenario-title">üìâ %30 Kullanƒ±m Azalƒ±≈üƒ±</div>
                <div class="scenario-desc">Kullanƒ±m optimize edilirse nasƒ±l deƒüi≈üir?</div>
              </div>
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('spike_day')">
                <div class="scenario-title">‚ö° G√ºnl√ºk Ani Artƒ±≈ü</div>
                <div class="scenario-desc">Bir g√ºnde 10x kullanƒ±m olursa?</div>
              </div>
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('roaming_week')">
                <div class="scenario-title">üåç Haftalƒ±k Roaming</div>
                <div class="scenario-desc">7 g√ºn roaming kullanƒ±mƒ± sim√ºle et</div>
              </div>
            </div>
            <div class="simulation-results" id="simulation-results" style="display:none">
              <div class="results-title">üìä Sim√ºlasyon Sonu√ßlarƒ±</div>
              <div id="results-content"></div>
            </div>
          </div>
          <div class="modal-footer">
            <button onclick="this.closest('.modal-overlay').remove()">Kapat</button>
          </div>
        </div>
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHtml);
  }

  async runWhatIfScenario(scenario) {
    if (!this.selectedSim) return;
    
    try {
      const resultsDiv = document.getElementById('simulation-results');
      const contentDiv = document.getElementById('results-content');
      
      resultsDiv.style.display = 'block';
      contentDiv.innerHTML = '<div class="muted">üîÑ Sim√ºlasyon √ßalƒ±≈üƒ±yor...</div>';
      
      const result = await this.apiCall(`/api/v1/whatif/${encodeURIComponent(this.selectedSim.sim_id)}`, {
        method: 'POST',
        body: JSON.stringify({
          scenario: scenario,
          parameters: {
            duration_days: scenario.includes('week') ? 7 : 30
          }
        })
      });
      
      if (result) {
        contentDiv.innerHTML = `
          <div class="simulation-result">
            <div class="result-summary">
              <strong>üí∞ Maliyet Deƒüi≈üimi:</strong> 
              <span class="${result.cost_change > 0 ? 'cost-increase' : 'cost-decrease'}">
                ${result.cost_change > 0 ? '+' : ''}‚Ç∫${result.cost_change.toFixed(2)}
              </span>
            </div>
            <div class="result-details">
              <div class="result-item">
                <span>Mevcut Aylƒ±k:</span>
                <span>‚Ç∫${result.current_monthly.toFixed(2)}</span>
              </div>
              <div class="result-item">
                <span>Sim√ºlasyon Sonrasƒ±:</span>
                <span>‚Ç∫${result.projected_monthly.toFixed(2)}</span>
              </div>
              <div class="result-item">
                <span>Risk Deƒüi≈üimi:</span>
                <span class="risk-change">${result.risk_change > 0 ? '+' : ''}${result.risk_change}</span>
              </div>
            </div>
            ${result.recommendations ? `
              <div class="simulation-recommendations">
                <strong>üí° √ñneriler:</strong><br>
                ${result.recommendations}
              </div>
            ` : ''}
          </div>
        `;
        
        this.appendLog(`üîÆ Sim√ºlasyon tamamlandƒ±: ${result.summary || 'Sonu√ßlar hazƒ±r'}`);
      }
      
    } catch (error) {
      document.getElementById('results-content').innerHTML = `<div class="muted">‚ùå Sim√ºlasyon hatasƒ±: ${error.message}</div>`;
      this.appendLog(`‚ùå Sim√ºlasyon hatasƒ±: ${error.message}`);
    }
  }
  
  connectWebSocket() {
    try {
      console.log('Attempting WebSocket connection to:', WS_BASE);
      this.ws = new WebSocket(WS_BASE);
      
      this.ws.onopen = () => {
        console.log('WebSocket connected successfully');
        this.elements.wsStatus.textContent = 'Baƒülƒ±';
        this.elements.wsDot.classList.remove('disconnected');
        
        // ƒ∞lk baƒülantƒ±da placeholder mesajƒ± temizle
        this.elements.alertsLog.innerHTML = '';
        this.appendAlert('üîó Canlƒ± baƒülantƒ± kuruldu');
      };
      
      this.ws.onmessage = (event) => {
        try {
          const alert = JSON.parse(event.data);
          
          // Anomali uyarƒ±sƒ± i√ßin detaylƒ± mesaj olu≈ütur
          if (alert.type === 'anomaly_detected') {
            const detailedMessage = this.formatAnomalyAlert(alert);
            this.appendAlert(detailedMessage, 'log-item alert-item');
            setTimeout(() => this.loadFleetData(), 1000);
          } else {
            this.appendAlert(`${this.getSeverityIcon(alert.severity)} ${alert.message}`, 'log-item alert-item');
          }
        } catch (e) {
          console.log(e);
          this.appendAlert(`üì® ${event.data}`, 'log-item alert-item');
        }
      };
      
      this.ws.onclose = () => {
        console.log('WebSocket disconnected');
        this.elements.wsStatus.textContent = 'Baƒülantƒ± kesildi';
        this.elements.wsDot.classList.add('disconnected');
        this.appendAlert('üîå Baƒülantƒ± kesildi ‚Äî yeniden baƒülanƒ±yor...');
        
        // 3 saniye sonra tekrar baƒülan
        setTimeout(() => this.connectWebSocket(), 3000);
      };
      
      this.ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        console.log('WebSocket readyState:', this.ws.readyState);
        this.elements.wsStatus.textContent = 'Baƒülantƒ± hatasƒ±';
        this.elements.wsDot.classList.add('disconnected');
      };
      
    } catch (error) {
      console.error('WebSocket connection failed:', error);
      console.log('Failed to connect to:', WS_BASE);
      this.elements.wsStatus.textContent = 'Baƒülanamadƒ±';
      this.elements.wsDot.classList.add('disconnected');
    }
  }
  
  getSeverityIcon(severity) {
    const icons = {
      'red': 'üö®',
      'orange': '‚ö†Ô∏è',
      'yellow': 'üíõ',
      'green': '‚úÖ',
      'info': '‚ÑπÔ∏è'
    };
    return icons[severity] || '‚ÑπÔ∏è';
  }
  
  getStatusText(status) {
    const texts = {
      'active': 'Aktif',
      'blocked': 'Engelli',
      'suspended': 'Askƒ±da',
      'inactive': 'ƒ∞naktif'
    };
    return texts[status] || status;
  }
  
  formatAnomalyAlert(alert) {
    const sim = this.sims ? this.sims.find(s => s.sim_id === alert.sim_id) : null;
    const simInfo = sim ? `${sim.sim_id} (${sim.device_type})` : alert.sim_id;
    
    // Tƒ±klanabilir SIM ID olu≈ütur
    const clickableSimId = `<span class="clickable-sim-id" data-sim-id="${alert.sim_id}" title="SIM'i se√ßmek i√ßin tƒ±klayƒ±n">${simInfo}</span>`;
    
    return `üö® ${clickableSimId}'de anomali tespit edildi`;
  }

  formatAnalysisLog(result) {
    const sim = this.selectedSim;
    if (!sim || !result) return 'Analiz sonucu alƒ±namadƒ±';
    
    const anomalyCount = result.anomalies ? result.anomalies.length : 0;
    const riskLevel = result.risk_level || 'bilinmiyor';
    
    let message = `üîç ${sim.sim_id} analizi tamamlandƒ±`;
    
    if (anomalyCount === 0) {
      message += ' - Anomali tespit edilmedi ‚úÖ';
    } else {
      const isNew = result.summary && result.summary.includes('yeni anomali');
      if (isNew) {
        message += ` - ${anomalyCount} yeni anomali tespit edildi üö®`;
      } else {
        message += ` - ${anomalyCount} mevcut anomali devam ediyor ‚ö†Ô∏è`;
      }
    }
    
    return message;
  }

  formatRiskSummary(result) {
    if (!result || !result.anomalies) return '';
    
    const anomalies = result.anomalies;
    const riskLevel = result.risk_level || 'green';
    const riskScore = result.risk_score || 0;
    
    if (anomalies.length === 0) {
      return `
        <div class="risk-summary low">
          <div class="risk-header">
            ‚úÖ G√ºvenli Durum
          </div>
          SIM kartƒ± normal parametrelerde √ßalƒ±≈üƒ±yor. Herhangi bir risk tespit edilmedi.
        </div>
      `;
    }
    
    const problemTypes = [...new Set(anomalies.map(a => a.type))];
    const problemDescriptions = {
      'sudden_spike': 'Ani Kullanƒ±m Artƒ±≈üƒ±',
      'sustained_drain': 'S√ºrekli Y√ºksek Kullanƒ±m', 
      'inactivity': 'Uzun S√ºreli ƒ∞naktiflik',
      'unexpected_roaming': 'Beklenmedik Roaming'
    };
    
    const problemList = problemTypes.map(type => problemDescriptions[type] || type).join(', ');
    
    const riskClass = riskLevel === 'red' ? 'high' : riskLevel === 'orange' ? 'medium' : 'low';
    const riskIcon = riskLevel === 'red' ? 'üî¥' : riskLevel === 'orange' ? 'üü†' : 'üü°';
    const actionText = riskLevel === 'red' ? 'Acil m√ºdahale gerekiyor!' : 
                      riskLevel === 'orange' ? 'Yakƒ±n takip √∂neriliyor' : 'ƒ∞zleme devam ediyor';
    
    return `
      <div class="risk-summary ${riskClass}">
        <div class="risk-header">
          ${riskIcon} ${anomalies.length} Anomali Tespit Edildi (Risk: ${riskScore})
        </div>
        <div>Tespit edilen sorunlar: ${problemList}</div>
        <div class="risk-problems">${actionText}</div>
      </div>
    `;
  }

  appendLog(message, cssClass = 'log-item') {
    const logItem = document.createElement('div');
    logItem.className = cssClass;
    
    // Mesaj tipine g√∂re sƒ±nƒ±f ekle
    if (message.includes('‚ùå')) logItem.classList.add('error-item');
    else if (message.includes('üîç')) logItem.classList.add('analysis-item');
    else if (message.includes('‚è≥') || message.includes('‚úÖ')) logItem.classList.add('action-item');
    
    // G√ºvenli HTML olu≈üturma
    const timeDiv = document.createElement('div');
    timeDiv.className = 'log-time';
    timeDiv.textContent = new Date().toLocaleTimeString('tr-TR');
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'log-content';
    contentDiv.innerHTML = message; // HTML i√ßerik i√ßin innerHTML kullan
    
    logItem.appendChild(timeDiv);
    logItem.appendChild(contentDiv);
    
    this.elements.actionsLog.insertBefore(logItem, this.elements.actionsLog.firstChild);
    
    // 50 kaydƒ± ge√ßmesin
    while (this.elements.actionsLog.children.length > 50) {
      this.elements.actionsLog.removeChild(this.elements.actionsLog.lastChild);
    }
  }
  
  appendAlert(message, cssClass = 'log-item alert-item') {
    const alertItem = document.createElement('div');
    alertItem.className = cssClass;
    
    // G√ºvenli HTML olu≈üturma
    const timeDiv = document.createElement('div');
    timeDiv.className = 'log-time';
    timeDiv.textContent = new Date().toLocaleTimeString('tr-TR');
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'log-content';
    contentDiv.innerHTML = message; // HTML i√ßerik i√ßin innerHTML kullan
    
    alertItem.appendChild(timeDiv);
    alertItem.appendChild(contentDiv);
    
    // Tƒ±klanabilir SIM ID'ler i√ßin event listener ekle
    const clickableSimIds = contentDiv.querySelectorAll('.clickable-sim-id');
    clickableSimIds.forEach(element => {
      element.addEventListener('click', (e) => {
        e.preventDefault();
        const simId = element.getAttribute('data-sim-id');
        this.selectSimById(simId);
      });
    });
    
    this.elements.alertsLog.insertBefore(alertItem, this.elements.alertsLog.firstChild);
    
    // 30 kaydƒ± ge√ßmesin
    while (this.elements.alertsLog.children.length > 30) {
      this.elements.alertsLog.removeChild(this.elements.alertsLog.lastChild);
    }
  }
  
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }
}

// Dashboard'ƒ± ba≈ülat
let dashboard;
document.addEventListener('DOMContentLoaded', () => {
  dashboard = new SimShieldDashboard();
});

// Klavye kƒ±sayollarƒ±
document.addEventListener('keydown', (e) => {
  if (e.key === 'r' && e.ctrlKey) {
    e.preventDefault();
    dashboard.loadFleetData();
  }
});