// --- CONFIG: SimShield API endpoints ---
const API_BASE = window.location.origin; // Otomatik olarak mevcut sunucu
const WS_BASE = (location.protocol === 'https:' ? 'wss' : 'ws') + '://' + window.location.host + '/api/v1/ws/alerts';
// -------------------------------

class SimShieldDashboard {
  constructor() {
    this.sims = [];
    this.selectedSim = null;
    this.ws = null;
    this.chartData = null;
    this.activeStatFilter = null; // Aktif stat filtresini takip et
    this.lastActionSimId = null; // Son manuel aksiyon SIM ID'si
    
    this.initElements();
    this.initEventListeners();
    this.connectWebSocket();
    this.loadFleetData();
    
    // Ba≈ülangƒ±√ß mesajƒ±
    setTimeout(() => {
      this.appendLog('üöÄ SimShield Dashboard ba≈ülatƒ±ldƒ± - IoT filo izleme sistemi aktif');
    }, 1000);
    
    // Auto refresh every 30 seconds
    setInterval(() => this.loadFleetData(), 30000);
  }
  
  initElements() {
    this.elements = {
      fleetList: document.getElementById('fleet-list'),
      refreshBtn: document.getElementById('refresh'),
      selectedName: document.getElementById('selected-sim-name'),
      selectedMeta: document.getElementById('selected-sim-meta'),
      simDetails: document.getElementById('sim-details'),
      usageChart: document.getElementById('usage-chart'),
      analyzeBtn: document.getElementById('analyze-btn'),
      analyzeAllBtn: document.getElementById('analyze-all-btn'),
      actionsLog: document.getElementById('actions-log-panel'),
      alertsMini: document.getElementById('alerts-list-panel'),
      wsStatus: document.getElementById('ws-status'),
      wsDot: document.getElementById('ws-dot'),
      apiStatus: document.getElementById('api-status'),
      apiDot: document.getElementById('api-dot'),
      searchInput: document.getElementById('search-input'),
      riskFilter: document.getElementById('risk-filter'),
      statusFilter: document.getElementById('status-filter'),
      cityFilter: document.getElementById('city-filter'),
      freezeBtn: document.getElementById('freeze-btn'),
      throttleBtn: document.getElementById('throttle-btn'),
      notifyBtn: document.getElementById('notify-btn'),
      bestOptionsBtn: document.getElementById('best-options-btn'),
      whatifBtn: document.getElementById('whatif-btn')
    };
  }
  
  initEventListeners() {
    this.elements.refreshBtn.addEventListener('click', () => this.loadFleetData());
    this.elements.analyzeBtn.addEventListener('click', () => this.analyzeCurrentSim());
    this.elements.analyzeAllBtn.addEventListener('click', () => this.analyzeAllSims());
    this.elements.freezeBtn.addEventListener('click', () => this.executeAction('freeze_24h'));
    this.elements.throttleBtn.addEventListener('click', () => this.executeAction('throttle'));
    this.elements.notifyBtn.addEventListener('click', () => this.executeAction('notify'));
    this.elements.bestOptionsBtn.addEventListener('click', () => this.loadBestOptions());
    this.elements.whatifBtn.addEventListener('click', () => this.showWhatIfModal());
    
    // Filtreler
    this.elements.searchInput.addEventListener('input', () => {
      this.clearStatFilter(); // Manuel arama yapƒ±ldƒ±ƒüƒ±nda stat filtresini temizle
      this.filterAndRender();
    });
    this.elements.riskFilter.addEventListener('change', () => {
      this.clearStatFilter(); // Manuel filtre deƒüi≈üikliƒüinde stat filtresini temizle
      this.filterAndRender();
    });
    this.elements.statusFilter.addEventListener('change', () => {
      this.clearStatFilter(); // Manuel filtre deƒüi≈üikliƒüinde stat filtresini temizle
      this.filterAndRender();
    });
    this.elements.cityFilter.addEventListener('change', () => {
      this.clearStatFilter(); // Manuel filtre deƒüi≈üikliƒüinde stat filtresini temizle
      this.filterAndRender();
    });
    
    // Tƒ±klanabilir istatistik kartlarƒ±
    document.querySelectorAll('.clickable-stat').forEach(stat => {
      stat.addEventListener('click', (e) => {
        const filterType = e.currentTarget.getAttribute('data-filter');
        this.applyStatFilter(filterType, e.currentTarget);
      });
    });
  }
  
  async apiCall(path, options = {}) {
    try {
      const response = await fetch(API_BASE + path, {
        headers: { 'Accept': 'application/json', 'Content-Type': 'application/json' },
        ...options
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error(`API call failed for ${path}:`, error);
      throw error;
    }
  }
  
  async loadFleetData() {
    try {
      this.elements.fleetList.innerHTML = '<div class="muted">üì° Filo verileri y√ºkleniyor...</div>';
      this.elements.apiStatus.textContent = 'baƒülanƒ±yor...';
      this.elements.apiStatus.style.color = 'var(--muted)';
      this.elements.apiDot.classList.remove('connected');
      this.elements.apiDot.classList.add('disconnected');
      
      const data = await this.apiCall('/api/v1/fleet');
      this.sims = Array.isArray(data) ? data : (data.sims || []);
      
      this.updateStatistics();
      this.populateCityFilter();
      this.filterAndRender();
      
      this.elements.apiStatus.textContent = 'baƒülƒ± ‚úì';
      this.elements.apiStatus.style.color = 'var(--accent)';
      this.elements.apiDot.classList.remove('disconnected');
      this.elements.apiDot.classList.add('connected');
      
      // ƒ∞lk y√ºkleme ise log'a bilgi ver
      if (this.sims.length > 0) {
        this.appendLog(`üìä ${this.sims.length} SIM kartƒ± y√ºklendi - Filo verileri g√ºncellendi`);
      }
      
    } catch (error) {
      console.error('Fleet data load error:', error);
      this.elements.fleetList.innerHTML = `<div class="muted">‚ùå Filo y√ºklenemedi: ${error.message}</div>`;
      this.elements.apiStatus.textContent = 'baƒülantƒ± yok ‚úó';
      this.elements.apiStatus.style.color = 'var(--danger)';
      this.elements.apiDot.classList.remove('connected');
      this.elements.apiDot.classList.add('disconnected');
      this.appendLog(`‚ùå Filo verileri y√ºklenemedi: ${error.message}`);
    }
  }
  
  updateStatistics() {
    const total = this.sims.length;
    const active = this.sims.filter(s => s.status === 'active').length;
    const highRisk = this.sims.filter(s => (s.risk_level === 'red' || s.risk_score >= 70)).length;
    const anomalies = this.sims.reduce((sum, s) => sum + (s.anomaly_count || 0), 0);
    
    document.getElementById('total-sims').textContent = total;
    document.getElementById('active-sims').textContent = active;
    document.getElementById('high-risk-sims').textContent = highRisk;
    document.getElementById('anomaly-count').textContent = anomalies;
  }
  
  populateCityFilter() {
    const cities = [...new Set(this.sims.map(s => s.city).filter(Boolean))].sort();
    const cityFilter = this.elements.cityFilter;
    
    // Mevcut se√ßimi koru
    const currentValue = cityFilter.value;
    cityFilter.innerHTML = '<option value="">T√ºm ≈ûehir</option>';
    cities.forEach(city => {
      const option = document.createElement('option');
      option.value = city;
      option.textContent = city;
      cityFilter.appendChild(option);
    });
    cityFilter.value = currentValue;
  }
  
  clearStatFilter() {
    // Stat filtresini temizle
    this.activeStatFilter = null;
    
    // Aktif stat kartƒ± g√∂rselini temizle
    document.querySelectorAll('.clickable-stat').forEach(stat => {
      stat.classList.remove('active');
    });
  }
  
  filterAndRender() {
    const searchTerm = this.elements.searchInput.value.toLowerCase();
    const riskFilter = this.elements.riskFilter.value;
    const statusFilter = this.elements.statusFilter.value;
    const cityFilter = this.elements.cityFilter.value;
    
    let filtered = [...this.sims];
    
    // √ñnce stat filtresini uygula (varsa)
    if (this.activeStatFilter) {
      switch (this.activeStatFilter) {
        case 'active':
          filtered = filtered.filter(sim => sim.status === 'active');
          break;
        case 'high-risk':
          filtered = filtered.filter(sim => (sim.risk_score || 0) >= 70);
          break;
        case 'anomaly':
          filtered = filtered.filter(sim => (sim.anomaly_count || 0) > 0);
          break;
        // 'all' durumunda t√ºm SIM'ler g√∂sterilir, ek filtre gerekmez
      }
    }
    
    // Sonra diƒüer filtreleri uygula
    filtered = filtered.filter(sim => {
      const matchesSearch = !searchTerm || 
        sim.sim_id.toLowerCase().includes(searchTerm) ||
        (sim.device_type || '').toLowerCase().includes(searchTerm);
      
      const matchesRisk = !riskFilter || sim.risk_level === riskFilter || 
        (riskFilter === 'red' && (sim.risk_score || 0) >= 70) ||
        (riskFilter === 'orange' && (sim.risk_score || 0) >= 40 && (sim.risk_score || 0) < 70) ||
        (riskFilter === 'green' && (sim.risk_score || 0) < 40);
      
      const matchesStatus = !statusFilter || sim.status === statusFilter;
      const matchesCity = !cityFilter || sim.city === cityFilter;
      
      return matchesSearch && matchesRisk && matchesStatus && matchesCity;
    });
    
    this.renderFleet(filtered);
  }
  
  applyStatFilter(filterType, clickedElement) {
    // √ñnceki aktif istatistik kartƒ±nƒ± temizle
    document.querySelectorAll('.clickable-stat').forEach(stat => {
      stat.classList.remove('active');
    });
    
    // Tƒ±klanan kartƒ± aktif yap
    clickedElement.classList.add('active');
    
    // Aktif stat filtresini kaydet
    this.activeStatFilter = filterType;
    
    // Manuel filtreleri temizle (sadece stat filtresi aktif olacak)
    this.elements.searchInput.value = '';
    this.elements.riskFilter.value = '';
    this.elements.statusFilter.value = '';
    this.elements.cityFilter.value = '';
    
    let filtered = [...this.sims];
    let logMessage = '';
    
    switch (filterType) {
      case 'all':
        this.activeStatFilter = null; // 'all' se√ßildiƒüinde filtreyi temizle
        // Hi√ßbir filtre uygulamaya gerek yok
        logMessage = 'üìä T√ºm SIM\'ler g√∂steriliyor';
        break;
        
      case 'active':
        filtered = this.sims.filter(sim => sim.status === 'active');
        logMessage = `üü¢ ${filtered.length} aktif SIM g√∂steriliyor`;
        break;
        
      case 'high-risk':
        filtered = this.sims.filter(sim => (sim.risk_score || 0) >= 70);
        logMessage = `üî¥ ${filtered.length} y√ºksek riskli SIM g√∂steriliyor`;
        break;
        
      case 'anomaly':
        filtered = this.sims.filter(sim => (sim.anomaly_count || 0) > 0);
        logMessage = `‚ö†Ô∏è ${filtered.length} anomalili SIM g√∂steriliyor`;
        break;
    }
    
    this.renderFleet(filtered);
    this.appendLog(logMessage);
    
    // Eƒüer 'all' se√ßildiyse visual aktif durumu da kaldƒ±r
    if (filterType === 'all') {
      setTimeout(() => {
        clickedElement.classList.remove('active');
      }, 3000);
    }
    // Diƒüer durumlarda stat filtresi aktif kaldƒ±k√ßa visual g√∂sterge de kalacak
  }
  
  renderFleet(simsToRender = this.sims) {
    if (!simsToRender || simsToRender.length === 0) {
      this.elements.fleetList.innerHTML = '<div class="muted">üì≠ Kriterlere uygun SIM bulunamadƒ±.</div>';
      return;
    }
    
    this.elements.fleetList.innerHTML = '';
    simsToRender.forEach(sim => {
      const element = this.createSimElement(sim);
      this.elements.fleetList.appendChild(element);
    });
  }
  
  createSimElement(sim) {
    const el = document.createElement('div');
    el.className = 'sim-item';
    if (this.selectedSim && this.selectedSim.sim_id === sim.sim_id) {
      el.classList.add('selected');
    }
    
    const riskScore = sim.risk_score || 0;
    const riskLevel = sim.risk_level || this.calculateRiskLevel(riskScore);
    const hasAnomalies = (sim.anomaly_count || 0) > 0;
    
    el.innerHTML = `
      <div class="sim-info">
        <div class="sim-id">
          ${hasAnomalies ? '<span class="anomaly-indicator"></span>' : ''}
          ${this.escapeHtml(sim.sim_id)}
        </div>
        <div class="sim-meta">
          <span>${this.getDeviceIcon(sim.device_type)} ${this.escapeHtml(sim.device_type || 'Bilinmiyor')}</span>
          <span>üìç ${this.escapeHtml(sim.city || '‚Äî')}</span>
          <span>üìä ${this.escapeHtml(sim.plan_name || sim.plan || '‚Äî')}</span>
        </div>
      </div>
      <div style="display:flex;align-items:center;gap:8px">
        <span class="badge ${riskLevel}">${riskScore}</span>
      </div>
    `;
    
    el.addEventListener('click', () => this.selectSimObject(sim));
    return el;
  }
  
  calculateRiskLevel(score) {
    if (score >= 70) return 'red';
    if (score >= 40) return 'orange';
    return 'green';
  }
  
  getDeviceIcon(deviceType) {
    const icons = {
      'POS': 'üí≥',
      'SmartMeter': '‚ö°',
      'Tracker': 'üìç',
      'Camera': 'üìπ',
      'Sensor': 'üå°Ô∏è'
    };
    return icons[deviceType] || 'üîß';
  }
  
  async selectSimObject(sim) {
    this.selectedSim = sim;
    
    // √ñnce anomaly alert'i gizle
    this.hideAnomalyAlert();
    
    // UI g√ºncellemelerini yap
    this.elements.selectedName.textContent = sim.sim_id;
    this.elements.selectedMeta.textContent = `${sim.device_type || '‚Äî'} ‚Ä¢ Plan: ${sim.plan_name || sim.plan || '‚Äî'} ‚Ä¢ Durum: ${this.getStatusText(sim.status)}`;
    
    // SIM detaylarƒ±nƒ± g√∂ster
    this.renderSimDetails(sim);
    
    // Butonlarƒ± aktifle≈ütir
    this.elements.analyzeBtn.disabled = false;
    this.elements.freezeBtn.disabled = false;
    this.elements.throttleBtn.disabled = false;
    this.elements.notifyBtn.disabled = false;
    this.elements.bestOptionsBtn.disabled = false;
    this.elements.whatifBtn.disabled = false;
    
    // Se√ßili SIM'i g√∂rsel olarak g√∂ster
    this.filterAndRender();
    
    // Verileri y√ºkle
    await this.loadSimData(sim.sim_id);
  }

  selectSimById(simId) {
    const sim = this.sims ? this.sims.find(s => s.sim_id === simId) : null;
    if (sim) {
      this.selectSimObject(sim);
      this.appendLog(`üéØ ${simId} SIM'i otomatik olarak se√ßildi`);
      
      // SIM'i g√∂r√ºn√ºr hale getir (scroll)
      setTimeout(() => {
        const simElement = document.querySelector(`.sim-item.selected`);
        if (simElement) {
          simElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
      }, 100);
    } else {
      this.appendLog(`‚ùå ${simId} SIM'i bulunamadƒ±`);
    }
  }

  renderSimDetails(sim) {
    // Tarihleri kullanƒ±m verilerinden hesapla
    this.elements.simDetails.innerHTML = `
      <div class="sim-details-grid">
        <div class="sim-detail-item">
          <div class="detail-label">üì± SIM ID</div>
          <div class="detail-value">${this.escapeHtml(sim.sim_id)}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üìä Plan</div>
          <div class="detail-value">${this.escapeHtml(sim.plan_name || sim.plan || 'Bilinmiyor')}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üè∑Ô∏è Durum</div>
          <div class="detail-value">
            <span class="status-badge ${sim.status}">${this.getStatusText(sim.status)}</span>
          </div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">${this.getDeviceIcon(sim.device_type)} Cihaz</div>
          <div class="detail-value">${this.escapeHtml(sim.device_type || 'Bilinmiyor')}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üìç Konum</div>
          <div class="detail-value">${this.escapeHtml(sim.city || 'Bilinmiyor')}</div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üìÖ Aktivasyon</div>
          <div class="detail-value"><span class="loading-text">üì° Y√ºkleniyor...</span></div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">üïí Son Aktivite</div>
          <div class="detail-value"><span class="loading-text">üì° Y√ºkleniyor...</span></div>
        </div>
        <div class="sim-detail-item">
          <div class="detail-label">‚ö° Risk Skoru</div>
          <div class="detail-value">
            <span class="badge ${sim.risk_level || this.calculateRiskLevel(sim.risk_score || 0)}">${sim.risk_score || 0}</span>
          </div>
        </div>
      </div>
    `;
    
    // Tarihleri async olarak y√ºkle
    this.loadSimDates(sim.sim_id);
  }
  
  async loadSimData(simId) {
    try {
      // Kullanƒ±m verileri y√ºkle
      await this.loadUsageData(simId);
      
      // Anomali analizi y√ºkle ve proaktif olarak g√∂ster
      await this.loadAnomalyData(simId);
      
    } catch (error) {
      console.error('SIM data load error:', error);
      this.appendLog(`‚ùå ${simId} verileri y√ºklenirken hata: ${error.message}`);
    }
  }
  
  async loadSimDates(simId) {
    try {
      // Kullanƒ±m verilerinden tarih bilgilerini al
      const data = await this.apiCall(`/api/v1/usage/${encodeURIComponent(simId)}?days=90`); // 1 yƒ±llƒ±k veri
      
      if (data && (Array.isArray(data) ? data.length > 0 : data.usage && data.usage.length > 0)) {
        const usage = Array.isArray(data) ? data : data.usage || [];
        
        if (usage.length > 0) {
          // En eski ve en yeni tarihleri bul
          const sortedUsage = usage.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));
          const firstDate = new Date(sortedUsage[0].timestamp);
          const lastDate = new Date(sortedUsage[sortedUsage.length - 1].timestamp);
          
          // Tarihleri g√ºncelle
          this.updateSimDetailDate('üìÖ Aktivasyon', firstDate.toLocaleDateString('tr-TR'));
          this.updateSimDetailDate('üïí Son Aktivite', lastDate.toLocaleDateString('tr-TR'));
        } else {
          this.updateSimDetailDate('üìÖ Aktivasyon', 'Veri yok');
          this.updateSimDetailDate('üïí Son Aktivite', 'Veri yok');
        }
      } else {
        this.updateSimDetailDate('üìÖ Aktivasyon', 'Veri yok');
        this.updateSimDetailDate('üïí Son Aktivite', 'Veri yok');
      }
      
    } catch (error) {
      console.error('SIM dates load error:', error);
      this.updateSimDetailDate('üìÖ Aktivasyon', 'Hata');
      this.updateSimDetailDate('üïí Son Aktivite', 'Hata');
    }
  }
  
  updateSimDetailDate(labelText, dateValue) {
    // Label'a g√∂re ilgili detail-value'yu bul ve g√ºncelle
    const detailItems = document.querySelectorAll('.sim-detail-item');
    detailItems.forEach(item => {
      const label = item.querySelector('.detail-label');
      if (label && label.textContent.includes(labelText.split(' ')[1])) { // ƒ∞kon olmadan kontrol et
        const valueElement = item.querySelector('.detail-value');
        if (valueElement) {
          valueElement.textContent = dateValue;
        }
      }
    });
  }
  
  async loadUsageData(simId) {
    try {
      this.elements.usageChart.innerHTML = '<div class="muted">üìä Kullanƒ±m verileri y√ºkleniyor...</div>';
      
      const data = await this.apiCall(`/api/v1/usage/${encodeURIComponent(simId)}?days=30`);
      this.chartData = data;
      this.renderUsageChart(data);
      
    } catch (error) {
      this.elements.usageChart.innerHTML = `<div class="muted">‚ùå Kullanƒ±m verileri alƒ±namadƒ±: ${error.message}</div>`;
    }
  }
  
  renderUsageChart(data) {
    if (!data || (!Array.isArray(data) && !data.usage)) {
      this.elements.usageChart.innerHTML = '<div class="muted">üìà Kullanƒ±m verisi bulunamadƒ±</div>';
      return;
    }
    
    const usage = Array.isArray(data) ? data : data.usage || [];
    if (usage.length === 0) {
      this.elements.usageChart.innerHTML = '<div class="muted">üìà 30 g√ºnl√ºk kullanƒ±m verisi bulunamadƒ±</div>';
      return;
    }
    
    // Son 30 g√ºnl√ºk veriyi al
    const last30 = usage.slice(-30);
    const maxUsage = Math.max(...last30.map(u => u.mb_used || 0), 1);
    const totalUsage = last30.reduce((sum, u) => sum + (u.mb_used || 0), 0);
    const avgUsage = totalUsage / last30.length;
    
    // Peak kullanƒ±m g√ºnlerini belirle
    const peakDays = last30.filter(u => (u.mb_used || 0) > avgUsage * 2);
    
    const barsHtml = last30.map((u, index) => {
      const height = Math.max(2, ((u.mb_used || 0) / maxUsage) * 100);
      const isHigh = height > 60;
      const isPeak = (u.mb_used || 0) > avgUsage * 2;
      const date = new Date(u.timestamp).toLocaleDateString('tr-TR', { 
        day: '2-digit', 
        month: '2-digit'
      });
      const tooltipText = `${date}: ${(u.mb_used || 0).toFixed(1)} MB`;
      
      return `<div class="usage-bar ${isHigh ? 'high' : ''} ${isPeak ? 'peak' : ''}" 
                   style="height:${height}%" 
                   data-tooltip="${tooltipText}"></div>`;
    }).join('');
    
    this.elements.usageChart.innerHTML = `
      <div style="width:100%;height:100%;display:flex;flex-direction:column">
        <div class="usage-stats">
          <div class="usage-stat">
            <div class="stat-value">${totalUsage.toFixed(1)} MB</div>
            <div class="stat-label">Toplam</div>
          </div>
          <div class="usage-stat">
            <div class="stat-value">${avgUsage.toFixed(1)} MB</div>
            <div class="stat-label">Ortalama</div>
          </div>
          <div class="usage-stat">
            <div class="stat-value">${Math.max(...last30.map(u => u.mb_used || 0)).toFixed(1)} MB</div>
            <div class="stat-label">Maksimum</div>
          </div>
        </div>
        <div class="usage-bars">${barsHtml}</div>
        <div class="usage-footer">
          <span>Son 30 G√ºn</span>
          ${peakDays.length > 0 ? `<span class="peak-indicator">‚ö° ${peakDays.length} a≈üƒ±rƒ± kullanƒ±m g√ºn√º</span>` : ''}
        </div>
      </div>
    `;
  }
  
  async loadAnomalyData(simId) {
    try {
      const analysis = await this.apiCall(`/api/v1/analyze/${encodeURIComponent(simId)}/latest`);
      this.displayAnomalyAlert(analysis);
      
    } catch (error) {
      this.hideAnomalyAlert();
    }
  }
  
  displayAnomalyAlert(analysis) {
    const alertSection = document.getElementById('anomaly-alert-section');
    const alertContent = document.getElementById('anomaly-alert-content');
    const countBadge = document.getElementById('anomaly-count-badge');
    
    if (!analysis || !analysis.anomalies || analysis.anomalies.length === 0) {
      this.hideAnomalyAlert();
      return;
    }
    
    // Show the alert section
    alertSection.style.display = 'block';
    
    // Update count badge
    countBadge.textContent = analysis.anomalies.length;
    
    // Generate anomaly content
    const anomalyItems = analysis.anomalies.map(anomaly => {
      const type = this.getAnomalyType(anomaly.type);
      const evidence = anomaly.evidence ? this.formatEvidence(anomaly.evidence) : '';
      
      return `
        <div class="anomaly-item">
          <div class="anomaly-type">${type.icon} ${type.title}</div>
          <div class="anomaly-reason">${this.escapeHtml(anomaly.reason || anomaly.description || 'Detay bilgi yok')}</div>
          ${evidence ? `<div class="anomaly-evidence">${evidence}</div>` : ''}
        </div>
      `;
    }).join('');
    
    alertContent.innerHTML = anomalyItems;
  }
  
  hideAnomalyAlert() {
    const alertSection = document.getElementById('anomaly-alert-section');
    if (alertSection) {
      alertSection.style.display = 'none';
    }
  }
  
  formatEvidence(evidence) {
    if (!evidence) return '';
    
    let formatted = [];
    if (evidence.current_usage) formatted.push(`Mevcut: ${Math.round(evidence.current_usage * 10) / 10}MB`);
    if (evidence.threshold) formatted.push(`E≈üik: ${Math.round(evidence.threshold * 10) / 10}MB`);
    if (evidence.baseline_average) formatted.push(`Ortalama: ${Math.round(evidence.baseline_average * 10) / 10}MB`);
    if (evidence.days_count) formatted.push(`${evidence.days_count} g√ºn`);
    
    return formatted.join(' ‚Ä¢ ');
  }
  
  renderAnomalyAnalysis(analysis) {
    if (!analysis || !analysis.anomalies || analysis.anomalies.length === 0) {
      this.elements.anomalyAnalysis.innerHTML = '<div class="analysis-item success">‚úÖ Anomali tespit edilmedi</div>';
      return;
    }
    
    const riskLevel = analysis.risk_level || 'warning';
    const riskScore = analysis.risk_score || 0;
    
    // Risk seviyesi a√ßƒ±klamasƒ±
    const riskDescription = this.getRiskDescription(riskScore, riskLevel);
    
    const anomalyItems = analysis.anomalies.map(anomaly => {
      const type = this.getAnomalyType(anomaly.type);
      const severity = anomaly.severity || this.getSeverityFromScore(riskScore);
      const detectedAt = anomaly.detected_at ? new Date(anomaly.detected_at).toLocaleString('tr-TR') : 'Tarih belirsiz';
      
      return `
        <div class="analysis-item ${severity}">
          <div class="anomaly-header">
            <span class="anomaly-title">${type.icon} ${type.title}</span>
            <span class="anomaly-time">${detectedAt}</span>
          </div>
          <div class="anomaly-description">
            ${this.escapeHtml(anomaly.reason || anomaly.description || 'Detay bilgi yok')}
          </div>
          ${anomaly.impact ? `<div class="anomaly-impact">üí• Etki: ${this.escapeHtml(anomaly.impact)}</div>` : ''}
        </div>
      `;
    }).join('');
    
    this.elements.anomalyAnalysis.innerHTML = this.formatRiskSummary({
      anomalies: analysis.anomalies,
      risk_level: riskLevel,
      risk_score: riskScore,
      summary: analysis.summary
    });
  }

  getRiskDescription(score, level) {
    if (score >= 80) return 'üö® Kritik seviye - Acil m√ºdahale gerekli';
    if (score >= 60) return '‚ö†Ô∏è Y√ºksek risk - Yakƒ±n takip √∂neriliyor';
    if (score >= 40) return 'üî∂ Orta seviye - ƒ∞zleme devam etsin';
    if (score >= 20) return 'üü° D√º≈ü√ºk risk - Normal aktivite';
    return '‚úÖ G√ºvenli seviye - Sorun yok';
  }

  getSeverityFromScore(score) {
    if (score >= 70) return 'danger';
    if (score >= 40) return 'warning';
    return 'success';
  }
  
  getAnomalyType(type) {
    const types = {
      'sudden_spike': { icon: '‚¨ÜÔ∏è', title: 'Ani Artƒ±≈ü' },
      'sustained_drain': { icon: 'üîã', title: 'S√ºrekli Y√ºksek Kullanƒ±m' },
      'inactivity': { icon: 'üò¥', title: 'ƒ∞naktivite' },
      'unexpected_roaming': { icon: 'üåç', title: 'Beklenmeyen Roaming' }
    };
    return types[type] || { icon: '‚ö†Ô∏è', title: 'Bilinmeyen Anomali' };
  }
  
  async analyzeCurrentSim() {
    if (!this.selectedSim) return;
    
    const btn = this.elements.analyzeBtn;
    const originalText = btn.innerHTML;
    btn.innerHTML = 'üîÑ Analiz ediliyor...';
    btn.disabled = true;
    
    try {
      const result = await this.apiCall(`/api/v1/analyze/${encodeURIComponent(this.selectedSim.sim_id)}`, {
        method: 'POST'
      });
      
      this.appendLog(this.formatAnalysisLog(result));
      
      // Anomali analizi yenile
      await this.loadAnomalyData(this.selectedSim.sim_id);
      
      // Fleet data'yƒ± yenile (risk skoru g√ºncellenmi≈ü olabilir)
      await this.loadFleetData();
      
    } catch (error) {
      this.appendLog(`‚ùå Analiz hatasƒ±: ${error.message}`);
    } finally {
      btn.innerHTML = originalText;
      btn.disabled = false;
    }
  }
  
  async analyzeAllSims() {
    if (!this.sims || this.sims.length === 0) {
      this.appendLog('‚ùå Analiz edilecek SIM bulunamadƒ±');
      return;
    }
    
    const btn = this.elements.analyzeAllBtn;
    const originalText = btn.innerHTML;
    btn.innerHTML = 'üîÑ T√ºm SIM\'ler analiz ediliyor...';
    btn.disabled = true;
    
    let successCount = 0;
    let errorCount = 0;
    const totalSims = this.sims.length;
    
    this.appendLog(`üöÄ ${totalSims} SIM'in toplu analizi ba≈ülatƒ±ldƒ±...`);
    
    try {
      // SIM'leri paralel olarak analiz et (maksimum 5'li gruplar halinde)
      const batchSize = 5;
      const batches = [];
      
      for (let i = 0; i < this.sims.length; i += batchSize) {
        batches.push(this.sims.slice(i, i + batchSize));
      }
      
      for (const batch of batches) {
        const promises = batch.map(async (sim) => {
          try {
            await this.apiCall(`/api/v1/analyze/${encodeURIComponent(sim.sim_id)}`, {
              method: 'POST'
            });
            successCount++;
            
            // Progress g√∂ster
            const progress = Math.round(((successCount + errorCount) / totalSims) * 100);
            btn.innerHTML = `üîÑ ƒ∞lerleme: ${progress}% (${successCount + errorCount}/${totalSims})`;
            
            return { success: true, sim_id: sim.sim_id };
          } catch (error) {
            errorCount++;
            console.error(`Analysis failed for ${sim.sim_id}:`, error);
            return { success: false, sim_id: sim.sim_id, error: error.message };
          }
        });
        
        await Promise.all(promises);
        
        // Her batch arasƒ±nda kƒ±sa bir bekleme
        if (batches.indexOf(batch) < batches.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
      
      // Sonu√ß mesajƒ±
      if (errorCount === 0) {
        this.appendLog(`‚úÖ Toplu analiz tamamlandƒ±: ${successCount} SIM ba≈üarƒ±yla analiz edildi`);
      } else {
        this.appendLog(`‚ö†Ô∏è Toplu analiz tamamlandƒ±: ${successCount} ba≈üarƒ±lƒ±, ${errorCount} hatalƒ±`);
      }
      
      // Fleet data'yƒ± yenile
      await this.loadFleetData();
      
      // Se√ßili SIM varsa anomali analizini yenile
      if (this.selectedSim) {
        await this.loadAnomalyData(this.selectedSim.sim_id);
      }
      
    } catch (error) {
      this.appendLog(`‚ùå Toplu analiz hatasƒ±: ${error.message}`);
    } finally {
      btn.innerHTML = originalText;
      btn.disabled = false;
    }
  }
  
  async executeAction(action) {
    if (!this.selectedSim) return;
    
    const actionNames = {
      'freeze_24h': '‚ùÑÔ∏è 24 Saat Dondurma',
      'throttle': 'üêå Hƒ±z D√º≈ü√ºrme', 
      'notify': 'üì¢ Uyarƒ± G√∂nderme'
    };
    
    const simId = this.selectedSim.sim_id;
    this.lastActionSimId = simId; // Son aksiyon SIM ID'sini kaydet
    
    try {
      this.appendLog(`‚è≥ <span class="clickable-sim-id" data-sim-id="${simId}">${simId}</span> i√ßin ${actionNames[action]} i≈ülemi ba≈ülatƒ±ldƒ±...`);
      
      const result = await this.apiCall('/api/v1/actions', {
        method: 'POST',
        body: JSON.stringify({
          sim_ids: [simId],
          action: action,
          reason: `Manuel ${action} eylemi`
        })
      });
      
      // API'den d√∂nen mesajƒ± g√∂rmezden gel ve kendi mesajƒ±mƒ±zƒ± olu≈ütur
      const successMessage = `‚úÖ <span class="clickable-sim-id" data-sim-id="${simId}">${simId}</span> i√ßin ${actionNames[action]} ba≈üarƒ±yla uygulandƒ±`;
      this.appendLog(successMessage);
      
    } catch (error) {
      this.appendLog(`‚ùå <span class="clickable-sim-id" data-sim-id="${simId}">${simId}</span> i√ßin ${actionNames[action]} hatasƒ±: ${error.message}`);
    }
  }
  
  async loadBestOptions() {
    if (!this.selectedSim) return;
    
    try {
      this.appendLog(`üí° ${this.selectedSim.sim_id} i√ßin en iyi se√ßenekler ara≈ütƒ±rƒ±lƒ±yor...`);
      
      const options = await this.apiCall(`/api/v1/best-options/${encodeURIComponent(this.selectedSim.sim_id)}`);
      
      if (options && options.length > 0) {
        // En iyi 3 se√ßeneƒüi detaylƒ± g√∂ster
        this.showBestOptionsModal(options.slice(0, 3));
      } else {
        this.appendLog(`‚ÑπÔ∏è ≈ûu an i√ßin daha iyi bir se√ßenek bulunamadƒ±`);
      }
      
    } catch (error) {
      this.appendLog(`‚ùå Se√ßenek analizi hatasƒ±: ${error.message}`);
    }
  }

  showBestOptionsModal(options) {
    // Modal HTML'i olu≈ütur
    const modalHtml = `
      <div class="modal-overlay" id="options-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>üí° ${this.selectedSim.sim_id} i√ßin En ƒ∞yi Se√ßenekler</h3>
            <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">‚úï</button>
          </div>
          <div class="modal-body">
            ${options.map((option, index) => `
              <div class="option-card ${index === 0 ? 'best-option' : ''}">
                <div class="option-header">
                  <div class="option-title">
                    ${index === 0 ? 'üèÜ ' : ''}${option.description}
                    ${index === 0 ? '<span class="best-badge">EN ƒ∞Yƒ∞</span>' : ''}
                  </div>
                  <div class="option-saving ${option.saving > 0 ? 'positive' : 'negative'}">
                    ${option.saving > 0 ? 'üí∞ ‚Ç∫' + option.saving.toFixed(2) + ' tasarruf' : '‚ö†Ô∏è ‚Ç∫' + Math.abs(option.saving).toFixed(2) + ' artƒ±≈ü'}
                  </div>
                </div>
                <div class="option-details">
                  <div class="cost-comparison">
                    <div class="cost-item">
                      <span class="cost-label">Mevcut Toplam:</span>
                      <span class="cost-value current">‚Ç∫${option.current_total.toFixed(2)}</span>
                    </div>
                    <div class="cost-item">
                      <span class="cost-label">Yeni Toplam:</span>
                      <span class="cost-value new">‚Ç∫${option.candidate_total.toFixed(2)}</span>
                    </div>
                  </div>
                  <div class="cost-breakdown">
                    <div class="breakdown-title">Maliyet Detayƒ±:</div>
                    <div class="breakdown-item">
                      <span>Plan √úcreti:</span>
                      <span>‚Ç∫${option.breakdown.base_cost.toFixed(2)}</span>
                    </div>
                    <div class="breakdown-item">
                      <span>A≈üƒ±m √úcreti:</span>
                      <span>‚Ç∫${option.breakdown.overage_cost.toFixed(2)}</span>
                    </div>
                    <div class="breakdown-item">
                      <span>Ek Paket:</span>
                      <span>‚Ç∫${option.breakdown.addon_cost.toFixed(2)}</span>
                    </div>
                  </div>
                </div>
              </div>
            `).join('')}
            <div class="modal-note">
              üí° Bu √∂neriler son 30 g√ºnl√ºk kullanƒ±m verilerine dayanmaktadƒ±r.
            </div>
          </div>
          <div class="modal-footer">
            <button onclick="this.closest('.modal-overlay').remove()">Kapat</button>
          </div>
        </div>
      </div>
    `;
    
    // Modal'ƒ± sayfaya ekle
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Log'a da kƒ±sa √∂zet ekle
    const topOption = options[0];
    this.appendLog(`üí∞ En iyi se√ßenek: ${topOption.description} (‚Ç∫${topOption.saving.toFixed(2)} tasarruf)`);
  }

  showWhatIfModal() {
    if (!this.selectedSim) return;
    
    const modalHtml = `
      <div class="modal-overlay" id="whatif-modal">
        <div class="modal-content">
          <div class="modal-header">
            <h3>üîÆ ${this.selectedSim.sim_id} i√ßin Sim√ºlasyon</h3>
            <button class="modal-close" onclick="this.closest('.modal-overlay').remove()">‚úï</button>
          </div>
          <div class="modal-body">
            <div class="whatif-scenarios">
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('increase_20')">
                <div class="scenario-title">üìà %20 Kullanƒ±m Artƒ±≈üƒ±</div>
                <div class="scenario-desc">Gelecek ay kullanƒ±m %20 artarsa ne olur?</div>
              </div>
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('decrease_30')">
                <div class="scenario-title">üìâ %30 Kullanƒ±m Azalƒ±≈üƒ±</div>
                <div class="scenario-desc">Kullanƒ±m optimize edilirse nasƒ±l deƒüi≈üir?</div>
              </div>
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('spike_day')">
                <div class="scenario-title">‚ö° G√ºnl√ºk Ani Artƒ±≈ü</div>
                <div class="scenario-desc">Bir g√ºnde 10x kullanƒ±m olursa?</div>
              </div>
              <div class="scenario-card" onclick="dashboard.runWhatIfScenario('roaming_week')">
                <div class="scenario-title">üåç Haftalƒ±k Roaming</div>
                <div class="scenario-desc">7 g√ºn roaming kullanƒ±mƒ± sim√ºle et</div>
              </div>
            </div>
            <div class="simulation-results" id="simulation-results" style="display:none">
              <div class="results-title">üìä Sim√ºlasyon Sonu√ßlarƒ±</div>
              <div id="results-content"></div>
            </div>
          </div>
          <div class="modal-footer">
            <button onclick="this.closest('.modal-overlay').remove()">Kapat</button>
          </div>
        </div>
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHtml);
  }

  async runWhatIfScenario(scenario) {
    if (!this.selectedSim) return;
    
    try {
      const resultsDiv = document.getElementById('simulation-results');
      const contentDiv = document.getElementById('results-content');
      
      resultsDiv.style.display = 'block';
      contentDiv.innerHTML = '<div class="muted">üîÑ Sim√ºlasyon √ßalƒ±≈üƒ±yor...</div>';
      
      const result = await this.apiCall(`/api/v1/whatif/${encodeURIComponent(this.selectedSim.sim_id)}`, {
        method: 'POST',
        body: JSON.stringify({
          scenario: scenario,
          parameters: {
            duration_days: scenario.includes('week') ? 7 : 30
          }
        })
      });
      
      if (result) {
        contentDiv.innerHTML = `
          <div class="simulation-result">
            <div class="result-summary">
              <strong>üí∞ Maliyet Deƒüi≈üimi:</strong> 
              <span class="${result.cost_change > 0 ? 'cost-increase' : 'cost-decrease'}">
                ${result.cost_change > 0 ? '+' : ''}‚Ç∫${result.cost_change.toFixed(2)}
              </span>
            </div>
            <div class="result-details">
              <div class="result-item">
                <span>Mevcut Aylƒ±k:</span>
                <span>‚Ç∫${result.current_monthly.toFixed(2)}</span>
              </div>
              <div class="result-item">
                <span>Sim√ºlasyon Sonrasƒ±:</span>
                <span>‚Ç∫${result.projected_monthly.toFixed(2)}</span>
              </div>
              <div class="result-item">
                <span>Risk Deƒüi≈üimi:</span>
                <span class="risk-change">${result.risk_change > 0 ? '+' : ''}${result.risk_change}</span>
              </div>
            </div>
            ${result.recommendations ? `
              <div class="simulation-recommendations">
                <strong>üí° √ñneriler:</strong><br>
                ${result.recommendations}
              </div>
            ` : ''}
          </div>
        `;
        
        this.appendLog(`üîÆ Sim√ºlasyon tamamlandƒ±: ${result.summary || 'Sonu√ßlar hazƒ±r'}`);
      }
      
    } catch (error) {
      document.getElementById('results-content').innerHTML = `<div class="muted">‚ùå Sim√ºlasyon hatasƒ±: ${error.message}</div>`;
      this.appendLog(`‚ùå Sim√ºlasyon hatasƒ±: ${error.message}`);
    }
  }
  
  connectWebSocket() {
    try {
      console.log('Attempting WebSocket connection to:', WS_BASE);
      this.ws = new WebSocket(WS_BASE);
      
      this.ws.onopen = () => {
        console.log('WebSocket connected successfully');
        this.elements.wsStatus.textContent = 'baƒülƒ± ‚úì';
        this.elements.wsStatus.style.color = 'var(--accent)';
        this.elements.wsDot.classList.remove('disconnected');
        this.elements.wsDot.classList.add('connected');
        
        // ƒ∞lk baƒülantƒ±da placeholder mesajƒ±nƒ± g√ºncelle
        const alertsContainer = document.getElementById('alerts-list-panel');
        const placeholder = alertsContainer.querySelector('.alert-placeholder');
        if (placeholder) {
          placeholder.innerHTML = `
            <div class="alert-placeholder-icon">üöÄ</div>
            <div class="alert-placeholder-text">Canlƒ± uyarƒ± sistemi hazƒ±r<br>Anomali bildirimleri burada g√∂sterilecek</div>
          `;
        }
      };
      
      this.ws.onmessage = (event) => {
        try {
          const alert = JSON.parse(event.data);
          
          // Ses bildirimini √ßal
          playNotificationSound();
          
          // Anomali uyarƒ±sƒ± i√ßin detaylƒ± mesaj olu≈ütur
          if (alert.type === 'anomaly_detected') {
            const detailedMessage = this.formatAnomalyAlert(alert);
            
            // Mini panele ekle (alert verisini de g√∂nder)
            this.appendMiniAlert(detailedMessage, alert);
            
            // Popup g√∂ster
            this.showAlertPopup(alert);
            
            // Fleet data'yƒ± yenile
            setTimeout(() => this.loadFleetData(), 1000);
          } else {
            // Bulk action veya diƒüer alert t√ºrleri i√ßin
            if (alert.type === 'bulk_action') {
              // Bulk action i√ßin √∂zel alert formatƒ±
              this.appendMiniAlert(alert.message, alert);
              // Bulk action sonrasƒ± lastActionSimId'yi sƒ±fƒ±rla
              this.lastActionSimId = null;
            } else {
              const message = `${this.getSeverityIcon(alert.severity)} ${alert.message}`;
              this.appendMiniAlert(message);
            }
            this.showAlertPopup(alert);
          }
        } catch (e) {
          console.log(e);
          this.appendMiniAlert(`üì® ${event.data}`);
        }
      };
      
      this.ws.onclose = () => {
        console.log('WebSocket disconnected');
        this.elements.wsStatus.textContent = 'baƒülantƒ± yok ‚úó';
        this.elements.wsStatus.style.color = 'var(--danger)';
        this.elements.wsDot.classList.add('disconnected');
        this.appendMiniAlert('üîå Canlƒ± uyarƒ± sistemi kesildi ‚Äî yeniden baƒülanƒ±yor...');
        
        // 3 saniye sonra tekrar baƒülan
        setTimeout(() => this.connectWebSocket(), 3000);
      };
      
      this.ws.onerror = (error) => {
        console.error('WebSocket error:', error);
        console.log('WebSocket readyState:', this.ws.readyState);
        this.elements.wsStatus.textContent = 'baƒülantƒ± hatasƒ± ‚ö†Ô∏è';
        this.elements.wsStatus.style.color = 'var(--warning)';
        this.elements.wsDot.classList.add('disconnected');
      };
      
    } catch (error) {
      console.error('WebSocket connection failed:', error);
      console.log('Failed to connect to:', WS_BASE);
      this.elements.wsStatus.textContent = 'baƒülanamadƒ± ‚úó';
      this.elements.wsStatus.style.color = 'var(--danger)';
      this.elements.wsDot.classList.add('disconnected');
    }
  }
  
  getSeverityIcon(severity) {
    const icons = {
      'red': 'üö®',
      'orange': '‚ö†Ô∏è',
      'yellow': 'üíõ',
      'green': '‚úÖ',
      'info': '‚ÑπÔ∏è'
    };
    return icons[severity] || '‚ÑπÔ∏è';
  }
  
  getStatusText(status) {
    const texts = {
      'active': 'Aktif',
      'blocked': 'Engelli',
      'suspended': 'Askƒ±da',
      'inactive': 'ƒ∞naktif'
    };
    return texts[status] || status;
  }
  
  formatAnomalyAlert(alert) {
    const sim = this.sims ? this.sims.find(s => s.sim_id === alert.sim_id) : null;
    const simInfo = sim ? `${sim.sim_id} (${sim.device_type})` : alert.sim_id;
    
    // Tƒ±klanabilir SIM ID olu≈ütur
    const clickableSimId = `<span class="clickable-sim-id" data-sim-id="${alert.sim_id}" title="SIM'i se√ßmek i√ßin tƒ±klayƒ±n">${simInfo}</span>`;
    
    // Risk skorunu g√∂rsel olarak formatla
    const riskScore = alert.risk_score ? Math.round(alert.risk_score) : 0;
    const riskIcon = this.getSeverityIcon(alert.severity || 'medium');
    
    // En son anomali tipini al - modelden gelen veri
    const latestAnomalyType = alert.latest_anomaly && alert.latest_anomaly.type ? 
      this.getAnomalyTypeText(alert.latest_anomaly.type) : 'Genel Anomali';
    
    return `${riskIcon} ${clickableSimId}'de ${latestAnomalyType} tespit edildi (Risk: ${riskScore})`;
  }

  formatAnalysisLog(result) {
    const sim = this.selectedSim;
    if (!sim || !result) return 'Analiz sonucu alƒ±namadƒ±';
    
    const anomalyCount = result.anomalies ? result.anomalies.length : 0;
    const riskLevel = result.risk_level || 'bilinmiyor';
    
    let message = `üîç ${sim.sim_id} analizi tamamlandƒ±`;
    
    if (anomalyCount === 0) {
      message += ' - Anomali tespit edilmedi ‚úÖ';
    } else {
      const isNew = result.summary && result.summary.includes('yeni anomali');
      if (isNew) {
        message += ` - ${anomalyCount} yeni anomali tespit edildi üö®`;
      } else {
        message += ` - ${anomalyCount} mevcut anomali devam ediyor ‚ö†Ô∏è`;
      }
    }
    
    return message;
  }

  formatRiskSummary(result) {
    if (!result || !result.anomalies) return '';
    
    const anomalies = result.anomalies;
    const riskLevel = result.risk_level || 'green';
    const riskScore = result.risk_score || 0;
    
    if (anomalies.length === 0) {
      return `
        <div class="risk-summary low">
          <div class="risk-header">
            ‚úÖ G√ºvenli Durum
          </div>
          SIM kartƒ± normal parametrelerde √ßalƒ±≈üƒ±yor. Herhangi bir risk tespit edilmedi.
        </div>
      `;
    }
    
    const problemTypes = [...new Set(anomalies.map(a => a.type))];
    const problemDescriptions = {
      'sudden_spike': 'Ani Kullanƒ±m Artƒ±≈üƒ±',
      'sustained_drain': 'S√ºrekli Y√ºksek Kullanƒ±m', 
      'inactivity': 'Uzun S√ºreli ƒ∞naktiflik',
      'unexpected_roaming': 'Beklenmedik Roaming'
    };
    
    const problemList = problemTypes.map(type => problemDescriptions[type] || type).join(', ');
    
    const riskClass = riskLevel === 'red' ? 'high' : riskLevel === 'orange' ? 'medium' : 'low';
    const riskIcon = riskLevel === 'red' ? 'üî¥' : riskLevel === 'orange' ? 'üü†' : 'üü°';
    const actionText = riskLevel === 'red' ? 'Acil m√ºdahale gerekiyor!' : 
                      riskLevel === 'orange' ? 'Yakƒ±n takip √∂neriliyor' : 'ƒ∞zleme devam ediyor';
    
    return `
      <div class="risk-summary ${riskClass}">
        <div class="risk-header">
          ${riskIcon} ${anomalies.length} Anomali Tespit Edildi (Risk: ${riskScore})
        </div>
        <div>Tespit edilen sorunlar: ${problemList}</div>
        <div class="risk-problems">${actionText}</div>
      </div>
    `;
  }

  appendLog(message, cssClass = 'log-item') {
    const logItem = document.createElement('div');
    logItem.className = cssClass;
    
    // Mesaj tipine g√∂re sƒ±nƒ±f ekle
    if (message.includes('‚ùå')) logItem.classList.add('error-item');
    else if (message.includes('üîç')) logItem.classList.add('analysis-item');
    else if (message.includes('‚è≥') || message.includes('‚úÖ')) logItem.classList.add('action-item');
    
    // G√ºvenli HTML olu≈üturma
    const timeDiv = document.createElement('div');
    timeDiv.className = 'log-time';
    timeDiv.textContent = new Date().toLocaleTimeString('tr-TR');
    
    const contentDiv = document.createElement('div');
    contentDiv.className = 'log-content';
    contentDiv.innerHTML = message; // HTML i√ßerik i√ßin innerHTML kullan
    
    logItem.appendChild(timeDiv);
    logItem.appendChild(contentDiv);
    
    // Clickable SIM ID'lere event listener ekle
    const clickableElements = logItem.querySelectorAll('.clickable-sim-id');
    clickableElements.forEach(el => {
      el.addEventListener('click', () => {
        const simId = el.dataset.simId || el.textContent;
        this.selectSimById(simId);
      });
    });
    
    // Placeholder'ƒ± kaldƒ±r
    const placeholder = this.elements.actionsLog.querySelector('.action-placeholder');
    if (placeholder) {
      placeholder.remove();
    }
    
    this.elements.actionsLog.insertBefore(logItem, this.elements.actionsLog.firstChild);
    
    // 50 kaydƒ± ge√ßmesin
    while (this.elements.actionsLog.children.length > 50) {
      this.elements.actionsLog.removeChild(this.elements.actionsLog.lastChild);
    }
  }
  
  appendMiniAlert(message, alertData = null) {
    const alertsContainer = document.getElementById('alerts-list-panel');
    const alertsCount = document.getElementById('alerts-count');
    const alertsCountPanel = document.getElementById('alerts-count-panel');
    
    // Placeholder'ƒ± kaldƒ±r
    const placeholder = alertsContainer.querySelector('.alert-placeholder');
    if (placeholder) {
      placeholder.remove();
    }
    
    const alertItem = document.createElement('div');
    alertItem.className = 'alert-mini-item';
    
    if (alertData) {
      if (alertData.type === 'bulk_action') {
        // Bulk action i√ßin √∂zel format - clickable SIM ID ile
        const message = alertData.message || '';
        let actionName = 'ƒ∞≈ülem';
        let actionIcon = '‚úÖ';
        
        if (message.includes('notify')) {
          actionName = 'Uyarƒ± G√∂nderme';
          actionIcon = 'üì¢';
        } else if (message.includes('freeze')) {
          actionName = '24 Saat Dondurma';
          actionIcon = '‚ùÑÔ∏è';
        } else if (message.includes('throttle')) {
          actionName = 'Hƒ±z D√º≈ü√ºrme';
          actionIcon = 'üêå';
        }
        
        // Se√ßili SIM'den bilgi al - √∂nce lastActionSimId'yi kontrol et
        let simId = this.lastActionSimId || (this.selectedSim ? this.selectedSim.sim_id : 'Unknown');
        let deviceType = 'Device';
        let location = 'Bilinmiyor';
        
        if (this.lastActionSimId) {
          // Son aksiyon SIM'ini bul
          const lastActionSim = this.sims ? this.sims.find(s => s.sim_id === this.lastActionSimId) : null;
          if (lastActionSim) {
            deviceType = lastActionSim.device_type || 'Device';
            location = lastActionSim.city || this.getSimLocation(this.lastActionSimId) || 'Bilinmiyor';
          }
        } else if (this.selectedSim) {
          deviceType = this.selectedSim.device_type || 'Device';
          location = this.selectedSim.city || this.getSimLocation(this.selectedSim.sim_id) || 'Bilinmiyor';
        }
        
        const timestamp = new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
        
        alertItem.innerHTML = `
          <div class="alert-mini-content compact">
            <div class="alert-mini-main">
              ${actionIcon} <span class="clickable-sim-id" data-sim-id="${simId}">${simId}</span> 
              (${deviceType}) - ${actionName} Tamamlandƒ±
            </div>
            <div class="alert-mini-meta">
              <span>üìç ${location}</span>
              <span class="alert-mini-time">${timestamp}</span>
            </div>
          </div>
        `;
        
        // Tƒ±klanabilir SIM ID event'i ekle
        const clickableElements = alertItem.querySelectorAll('.clickable-sim-id');
        clickableElements.forEach(el => {
          el.addEventListener('click', (e) => {
            e.stopPropagation();
            const simId = el.dataset.simId;
            if (simId) {
              this.selectSimById(simId);
            }
          });
        });
        
      } else {
        // Detaylƒ± alert verisi var - KOMPAKT FORMAT (anomali i√ßin)
        const riskScore = alertData.risk_score || 0;
        const riskClass = riskScore >= 70 ? 'high' : riskScore >= 40 ? 'medium' : 'low';
        const severityIcon = riskScore >= 70 ? 'üö®' : riskScore >= 40 ? '‚ö†Ô∏è' : '‚úÖ';
        const simId = alertData.sim_id || 'UNKNOWN';
        
        // SIM listesinden device type bilgisini al
        let deviceType = 'Device';
        if (this.sims && simId !== 'UNKNOWN') {
          const sim = this.sims.find(s => s.sim_id === simId);
          if (sim) {
            deviceType = sim.device_type || 'Device';
          }
        }
        
        const location = alertData.location || this.getSimLocation(alertData.sim_id) || 'Bilinmiyor';
        const anomalyType = alertData.latest_anomaly?.type ? 
          this.getAnomalyTypeText(alertData.latest_anomaly.type) : 'Anomali';
        const timestamp = new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' });
        
        // Kompakt tek satƒ±r format
        alertItem.innerHTML = `
          <div class="alert-mini-content compact">
            <div class="alert-mini-main">
              ${severityIcon} <span class="clickable-sim-id" data-sim-id="${simId}">${simId}</span> 
              (${deviceType}) - ${anomalyType} 
              <span class="alert-mini-score ${riskClass}">${Math.round(riskScore)}</span>
            </div>
            <div class="alert-mini-meta">
              <span>üìç ${location}</span>
              <span class="alert-mini-time">${timestamp}</span>
            </div>
          </div>
        `;
        
        // Tƒ±klanabilir SIM ID event'i ekle
        const clickableElements = alertItem.querySelectorAll('.clickable-sim-id');
        clickableElements.forEach(el => {
          el.addEventListener('click', (e) => {
            e.stopPropagation();
            const simId = el.dataset.simId;
            if (simId) {
              this.selectSimById(simId);
            }
          });
        });
        
        // Anomali uyarƒ±sƒ± i√ßin ses √ßal
        if (alertData.type === 'anomaly_detected') {
          playNotificationSound();
        }
      }
      
    } else {
      // Basit mesaj - Manuel aksiyonlar i√ßin HTML korunarak format
      let formattedMessage = message;
      
      // Eƒüer mesaj HTML clickable SIM ID i√ßeriyorsa, koru
      if (message.includes('<span class="clickable-sim-id"')) {
        formattedMessage = message; // HTML'i olduƒüu gibi koru
      } else {
        // Manuel aksiyon mesajlarƒ±nƒ± d√ºzelt (sadece d√ºz tekst i√ßin)
        if (message.includes('SIM\'e') && message.includes('eylemi uygulandƒ±')) {
          // "1 SIM'e notify eylemi uygulandƒ±" -> "‚úÖ Uyarƒ± G√∂nderme tamamlandƒ±"
          if (message.includes('notify')) {
            formattedMessage = '‚úÖ Uyarƒ± G√∂nderme i≈ülemi tamamlandƒ±';
          } else if (message.includes('freeze_24h')) {
            formattedMessage = '‚úÖ 24 Saat Dondurma i≈ülemi tamamlandƒ±';
          } else if (message.includes('throttle')) {
            formattedMessage = '‚úÖ Hƒ±z D√º≈ü√ºrme i≈ülemi tamamlandƒ±';
          }
        }
      }
      
      alertItem.innerHTML = `
        <div class="alert-mini-content">
          <div class="alert-mini-main">${formattedMessage}</div>
          <div class="alert-mini-meta">
            <span class="alert-mini-time">${new Date().toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}</span>
          </div>
        </div>
      `;
      
      // HTML i√ßindeki clickable SIM ID'lere event listener ekle
      const clickableElements = alertItem.querySelectorAll('.clickable-sim-id');
      clickableElements.forEach(el => {
        el.addEventListener('click', (e) => {
          e.stopPropagation();
          const simId = el.dataset.simId;
          if (simId) {
            this.selectSimById(simId);
          }
        });
      });
    }
    
    // En √ºste ekle (LIFO)
    alertsContainer.insertBefore(alertItem, alertsContainer.firstChild);
    
    // Maksimum 50 alert tutma
    const allAlerts = alertsContainer.querySelectorAll('.alert-mini-item');
    if (allAlerts.length > 50) {
      allAlerts[allAlerts.length - 1].remove();
    }
    
    // Alert sayƒ±sƒ±nƒ± g√ºncelle
    const currentCount = allAlerts.length;
    if (alertsCount) {
      alertsCount.textContent = currentCount;
    }
    if (alertsCountPanel) {
      alertsCountPanel.textContent = currentCount;
    }
    
    // Floating alerts panel'e de ekle
    const panelContainer = document.querySelector('#floating-alerts-panel .floating-panel-content');
    if (panelContainer) {
      const clonedItem = alertItem.cloneNode(true);
      
      // Panel'deki placeholder'ƒ± da kaldƒ±r
      const panelPlaceholder = panelContainer.querySelector('.alert-placeholder');
      if (panelPlaceholder) {
        panelPlaceholder.remove();
      }
      
      panelContainer.insertBefore(clonedItem, panelContainer.firstChild);
      
      // Panel'de de maksimum limit
      const panelAlerts = panelContainer.querySelectorAll('.alert-mini-item');
      if (panelAlerts.length > 50) {
        panelAlerts[panelAlerts.length - 1].remove();
      }
    }
    
    // Hafif animasyon
    alertItem.style.opacity = '0';
    alertItem.style.transform = 'translateY(-10px)';
    setTimeout(() => {
      alertItem.style.transition = 'all 0.3s ease';
      alertItem.style.opacity = '1';
      alertItem.style.transform = 'translateY(0)';
    }, 50);
  }

  selectSim(simId) {
    // SIM kartƒ±nƒ± se√ß ve detay paneline y√ºkle
    const sim = this.sims.find(s => s.sim_id === simId);
    if (sim) {
      this.updateSimDetails(sim);
      // Flash efekti ekle
      const detailsPanel = document.getElementById('floating-sim-details-panel');
      if (detailsPanel && !detailsPanel.style.display !== 'none') {
        detailsPanel.style.background = 'rgba(74, 144, 226, 0.3)';
        setTimeout(() => {
          detailsPanel.style.background = '';
        }, 1000);
      }
    }
  }

  updateSimDetails(sim) {
    // renderSimDetails ile aynƒ± i≈ülevi g√∂r√ºr
    this.renderSimDetails(sim);
    
    // SIM Details panelini a√ßƒ±k hale getir
    const detailsPanel = document.getElementById('floating-sim-details-panel');
    if (detailsPanel && detailsPanel.style.display === 'none') {
      detailsPanel.style.display = 'block';
    }
  }
  
  showAlertPopup(alert) {
    // Eski popup'larƒ± kapat
    const existingPopups = document.querySelectorAll('.alert-popup');
    existingPopups.forEach(popup => popup.remove());
    
    // Mesaj i√ßeriƒüi hazƒ±rla
    let message = '';
    let title = 'üö® Yeni Uyarƒ±';
    
    if (alert.type === 'anomaly_detected') {
      const sim = this.sims ? this.sims.find(s => s.sim_id === alert.sim_id) : null;
      const simInfo = sim ? `${sim.sim_id} (${sim.device_type})` : alert.sim_id;
      
      // Clickable SIM ID olu≈ütur
      const clickableSimId = `<span class="clickable-sim-id" data-sim-id="${alert.sim_id}" title="SIM'i se√ßmek i√ßin tƒ±klayƒ±n" style="color: #007bff; cursor: pointer; text-decoration: underline;">${simInfo}</span>`;
      
      title = 'üö® Anomali Tespit Edildi';
      message = `<strong>${clickableSimId}</strong>'de anomali tespit edildi.`;
      
      if (alert.details) {
        message += `<br><br><strong>Detaylar:</strong> ${alert.details}`;
      }
    } else if (alert.type === 'bulk_action') {
      // Manuel aksiyon alert'leri i√ßin
      title = '‚úÖ ƒ∞≈ülem Tamamlandƒ±';
      
      // Mesajdan SIM ID'yi √ßƒ±kart
      const actionMessage = alert.message || '';
      
      // "1 SIM'e notify eylemi uygulandƒ±" -> SIM ID'yi bul
      if (this.selectedSim) {
        const simId = this.selectedSim.sim_id;
        const sim = this.selectedSim;
        const simInfo = `${simId} (${sim.device_type || 'Device'})`;
        
        // Clickable SIM ID olu≈ütur
        const clickableSimId = `<span class="clickable-sim-id" data-sim-id="${simId}" title="SIM'i se√ßmek i√ßin tƒ±klayƒ±n" style="color: #007bff; cursor: pointer; text-decoration: underline;">${simInfo}</span>`;
        
        // Action type'ƒ± belirle
        let actionName = 'ƒ∞≈ülem';
        if (actionMessage.includes('notify')) {
          actionName = 'Uyarƒ± G√∂nderme';
        } else if (actionMessage.includes('freeze')) {
          actionName = '24 Saat Dondurma';
        } else if (actionMessage.includes('throttle')) {
          actionName = 'Hƒ±z D√º≈ü√ºrme';
        }
        
        message = `<strong>${clickableSimId}</strong> i√ßin <strong>${actionName}</strong> i≈ülemi ba≈üarƒ±yla uygulandƒ±.`;
      } else {
        message = actionMessage;
      }
    } else {
      message = alert.message || 'Yeni uyarƒ± mesajƒ±';
    }
    
    // Unique ID olu≈ütur
    const popupId = `alert-popup-${Date.now()}`;
    
    // Popup HTML'i olu≈ütur
    const popupHtml = `
      <div class="alert-popup" id="${popupId}">
        <div class="alert-popup-header">
          <div class="alert-popup-title">${title}</div>
          <button class="alert-popup-close" onclick="this.closest('.alert-popup').remove()">‚úï</button>
        </div>
        <div class="alert-popup-content">
          ${message}
        </div>
        <div class="alert-popup-time">
          ${new Date().toLocaleString('tr-TR')}
        </div>
      </div>
    `;
    
    // Popup'ƒ± sayfaya ekle
    document.body.insertAdjacentHTML('beforeend', popupHtml);
    
    // Popup i√ßindeki clickable SIM ID'ler i√ßin event listener ekle
    const popup = document.getElementById(popupId);
    const clickableSimIds = popup.querySelectorAll('.clickable-sim-id');
    clickableSimIds.forEach(element => {
      element.addEventListener('click', (e) => {
        e.preventDefault();
        const simId = element.getAttribute('data-sim-id');
        this.selectSimById(simId);
        // Popup'ƒ± kapat
        popup.remove();
      });
    });
    
    // 8 saniye sonra otomatik kapat
    setTimeout(() => {
      const popup = document.getElementById(popupId);
      if (popup) {
        popup.classList.add('closing');
        setTimeout(() => popup.remove(), 400);
      }
    }, 8000);
  }
  
  escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  getAnomalyTypeText(type) {
    const typeMap = {
      // Enum'larda tanƒ±mlƒ± anomali t√ºrleri
      'sudden_spike': 'Ani Kullanƒ±m Artƒ±≈üƒ±',
      'sustained_drain': 'S√ºrekli Y√ºksek Kullanƒ±m',
      'inactivity': 'Uzun S√ºreli ƒ∞naktivite',
      'unexpected_roaming': 'Beklenmeyen Roaming'
    };
    
    return typeMap[type] || type;
  }

  getSimLocation(simId) {
    const sim = this.sims ? this.sims.find(s => s.sim_id === simId) : null;
    return sim ? sim.city : null;
  }
}

// Dashboard'ƒ± ba≈ülat
let dashboard;
let soundEnabled = true;
let audioContext = null;

// Audio context'i kullanƒ±cƒ± etkile≈üimi ile ba≈ülat
function initAudioContext() {
  if (!audioContext) {
    audioContext = new (window.AudioContext || window.webkitAudioContext)();
  }
  return audioContext;
}

// Ses √ßalma fonksiyonu
function playNotificationSound() {
  if (!soundEnabled) return;
  
  try {
    const ctx = initAudioContext();
    if (ctx.state === 'suspended') {
      ctx.resume().then(() => {
        playBeep(ctx);
      });
    } else {
      playBeep(ctx);
    }
  } catch (error) {
    console.warn('Ses √ßalmada hata:', error);
  }
}

function playBeep(audioContext) {
  const oscillator = audioContext.createOscillator();
  const gainNode = audioContext.createGain();
  
  oscillator.connect(gainNode);
  gainNode.connect(audioContext.destination);
  
  oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
  oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
  
  gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
  gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
  
  oscillator.start(audioContext.currentTime);
  oscillator.stop(audioContext.currentTime + 0.3);
}

// Panel y√∂netimi
class PanelManager {
  constructor() {
    this.panels = {
      alerts: document.getElementById('alerts-panel'),
      actions: document.getElementById('actions-panel')
    };
    this.setupEventListeners();
    this.makePanelsDraggable();
  }

  setupEventListeners() {
    // Panel a√ßma butonlarƒ±
    document.getElementById('open-alerts-panel')?.addEventListener('click', () => {
      this.openPanel('alerts');
    });
    
    document.getElementById('open-actions-panel')?.addEventListener('click', () => {
      this.openPanel('actions');
    });

    // Panel kontrolleri
    document.getElementById('close-alerts')?.addEventListener('click', () => {
      this.closePanel('alerts');
    });
    
    document.getElementById('close-actions')?.addEventListener('click', () => {
      this.closePanel('actions');
    });

    // Ses kontrolleri
    document.getElementById('toggle-sound')?.addEventListener('click', () => {
      this.toggleSound();
    });
    
    document.getElementById('toggle-sound-panel')?.addEventListener('click', () => {
      this.toggleSound();
    });

    // Temizleme butonlarƒ±
    document.getElementById('clear-alerts-panel')?.addEventListener('click', () => {
      this.clearAlerts();
    });
    
    document.getElementById('clear-actions-panel')?.addEventListener('click', () => {
      this.clearActions();
    });

    // Dƒ±≈üa aktarma butonlarƒ±
    document.getElementById('export-alerts')?.addEventListener('click', () => {
      this.exportAlerts();
    });
    
    document.getElementById('export-actions')?.addEventListener('click', () => {
      this.exportActions();
    });
  }

  openPanel(panelName) {
    const panel = this.panels[panelName];
    if (panel) {
      panel.classList.add('show');
      
      // ƒ∞√ßeriƒüi senkronize et
      if (panelName === 'alerts') {
        this.syncAlertsContent();
      } else if (panelName === 'actions') {
        this.syncActionsContent();
      }
    }
  }

  showPanel(panelId) {
    // panelId'den panelName'i √ßƒ±kar (alerts-panel -> alerts)
    const panelName = panelId.replace('-panel', '');
    this.openPanel(panelName);
  }

  closePanel(panelName) {
    const panel = this.panels[panelName];
    if (panel) {
      panel.classList.remove('show');
    }
  }

  toggleSound() {
    soundEnabled = !soundEnabled;
    const soundButtons = [
      document.getElementById('toggle-sound'),
      document.getElementById('toggle-sound-panel')
    ];
    
    soundButtons.forEach(btn => {
      if (btn) {
        btn.textContent = soundEnabled ? 'üîä' : 'üîá';
        btn.title = soundEnabled ? 'Sesi kapat' : 'Sesi a√ß';
      }
    });
    
    // Test sesi √ßal
    if (soundEnabled) {
      playNotificationSound();
    }
  }

  syncAlertsContent() {
    const sourceContainer = document.getElementById('alerts-mini');
    const targetContainer = document.getElementById('alerts-list-panel');
    
    if (sourceContainer && targetContainer) {
      targetContainer.innerHTML = sourceContainer.innerHTML;
      
      // Event listener'larƒ± yeniden ekle
      const clickableElements = targetContainer.querySelectorAll('.clickable-sim-id');
      clickableElements.forEach(el => {
        el.addEventListener('click', (e) => {
          e.stopPropagation();
          const simId = el.dataset.simId;
          if (simId && dashboard) {
            dashboard.selectSim(simId);
          }
        });
      });
    }
  }

  syncActionsContent() {
    const sourceContainer = document.getElementById('actions-log');
    const targetContainer = document.getElementById('actions-log-panel');
    
    if (sourceContainer && targetContainer) {
      targetContainer.innerHTML = sourceContainer.innerHTML;
    }
  }

  clearAlerts() {
    const containers = [
      document.getElementById('alerts-mini'),
      document.getElementById('alerts-list-panel')
    ];
    
    containers.forEach(container => {
      if (container) {
        container.innerHTML = `
          <div class="alert-placeholder">
            <div class="alert-placeholder-icon">‚ú®</div>
            <div class="alert-placeholder-text">T√ºm uyarƒ±lar temizlendi</div>
          </div>
        `;
      }
    });
    
    // Sayaclarƒ± sƒ±fƒ±rla
    const counters = [
      document.getElementById('alerts-count'),
      document.getElementById('alerts-count-panel')
    ];
    
    counters.forEach(counter => {
      if (counter) {
        counter.textContent = '0';
      }
    });
  }

  clearActions() {
    const containers = [
      document.getElementById('actions-log'),
      document.getElementById('actions-log-panel')
    ];
    
    containers.forEach(container => {
      if (container) {
        container.innerHTML = '<div class="muted">Oturum ge√ßmi≈üi temizlendi...</div>';
      }
    });
  }

  exportAlerts() {
    const alertsContainer = document.getElementById('alerts-mini');
    const alerts = alertsContainer.querySelectorAll('.alert-mini-item');
    
    let content = 'SimShield Canlƒ± Uyarƒ±lar Raporu\n';
    content += '=' + '='.repeat(40) + '\n';
    content += `Tarih: ${new Date().toLocaleString('tr-TR')}\n\n`;
    
    alerts.forEach((alert, index) => {
      const mainText = alert.querySelector('.alert-mini-main')?.textContent || '';
      const details = alert.querySelector('.alert-mini-details')?.textContent || '';
      const time = alert.querySelector('.alert-mini-time')?.textContent || '';
      
      content += `${index + 1}. ${mainText}\n`;
      if (details) content += `   ${details.replace(/\n/g, '\n   ')}\n`;
      if (time) content += `   Zaman: ${time}\n`;
      content += '\n';
    });
    
    this.downloadText(content, 'simshield-uyarilar.txt');
  }

  exportActions() {
    const actionsContainer = document.getElementById('actions-log');
    const actions = actionsContainer.querySelectorAll('.log-entry');
    
    let content = 'SimShield Oturum ƒ∞≈ülem Ge√ßmi≈üi\n';
    content += '=' + '='.repeat(40) + '\n';
    content += `Tarih: ${new Date().toLocaleString('tr-TR')}\n\n`;
    
    actions.forEach((action, index) => {
      content += `${index + 1}. ${action.textContent}\n`;
    });
    
    this.downloadText(content, 'simshield-oturum-gecmisi.txt');
  }

  downloadText(text, filename) {
    const element = document.createElement('a');
    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);
    element.style.display = 'none';
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  }

  makePanelsDraggable() {
    Object.values(this.panels).forEach(panel => {
      const header = panel.querySelector('.floating-panel-header');
      if (header) {
        this.makeDraggable(panel, header);
      }
    });
  }

  makeDraggable(panel, handle) {
    let isDragging = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset = 0;
    let yOffset = 0;

    handle.addEventListener('mousedown', (e) => {
      if (e.target.classList.contains('close-btn') ||
          e.target.classList.contains('toggle-sound-btn-panel')) {
        return;
      }
      
      initialX = e.clientX - xOffset;
      initialY = e.clientY - yOffset;
      
      if (e.target === handle || handle.contains(e.target)) {
        isDragging = true;
        panel.style.cursor = 'grabbing';
      }
    });

    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        e.preventDefault();
        currentX = e.clientX - initialX;
        currentY = e.clientY - initialY;
        
        xOffset = currentX;
        yOffset = currentY;
        
        panel.style.transform = `translate(${currentX}px, ${currentY}px)`;
      }
    });

    document.addEventListener('mouseup', () => {
      isDragging = false;
      panel.style.cursor = 'default';
    });
  }
}

document.addEventListener('DOMContentLoaded', () => {
  dashboard = new SimShieldDashboard();
  const panelManager = new PanelManager();
  
  // Tab navigation functionality
  const tabBtns = document.querySelectorAll('.tab-btn');
  const tabPanes = document.querySelectorAll('.tab-pane');
  
  tabBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const targetTab = btn.dataset.tab;
      
      // Update tab buttons
      tabBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      
      // Update tab panes
      tabPanes.forEach(pane => {
        pane.classList.remove('active');
        if (pane.id === `tab-${targetTab}`) {
          pane.classList.add('active');
        }
      });
    });
  });
  
  // Header'daki panel butonlarƒ±nƒ± ayarla
  const alertsBtn = document.getElementById('alerts-btn');
  const actionsBtn = document.getElementById('actions-btn');
  
  if (alertsBtn) {
    alertsBtn.addEventListener('click', () => {
      // Ses iznini al (ilk kullanƒ±cƒ± etkile≈üimi)
      initAudioContext();
      panelManager.showPanel('alerts-panel');
    });
  }
  
  if (actionsBtn) {
    actionsBtn.addEventListener('click', () => {
      panelManager.showPanel('actions-panel');
    });
  }
  
  // Sidebar butonlarƒ± i√ßin event listener'lar - sadece temizleme butonu
  const clearAlertsBtn = document.getElementById('clear-alerts');
  
  if (clearAlertsBtn) {
    clearAlertsBtn.addEventListener('click', () => {
      const alertsContainer = document.getElementById('alerts-mini');
      const alertsCount = document.getElementById('alerts-count');
      
      // T√ºm alert'leri temizle
      alertsContainer.innerHTML = `
        <div class="alert-placeholder">
          <div class="alert-placeholder-icon">‚ú®</div>
          <div class="alert-placeholder-text">T√ºm uyarƒ±lar temizlendi</div>
        </div>
      `;
      
      if (alertsCount) {
        alertsCount.textContent = '0';
      }
    });
  }
});

// Klavye kƒ±sayollarƒ±
document.addEventListener('keydown', (e) => {
  if (e.key === 'r' && e.ctrlKey) {
    e.preventDefault();
    dashboard.loadFleetData();
  }
});